
LAB3_EXE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003abc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bec  08003bec  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08003bec  08003bec  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bec  08003bec  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08003bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000044  08003c38  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003c38  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a1c  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3e  00000000  00000000  00029a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002b5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002c0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d4e  00000000  00000000  0002ca78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfba  00000000  00000000  000437c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082610  00000000  00000000  0004f780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1d90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c28  00000000  00000000  000d1de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bb0 	.word	0x08003bb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08003bb0 	.word	0x08003bb0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <set_button1_flag>:

void subKeyProcess()
{
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
void set_button1_flag(){
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	button1_flag =1;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <set_button1_flag+0x14>)
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000060 	.word	0x20000060

08000758 <set_button2_flag>:
void reset_button1_flag(){
	button1_flag =0;
}
void set_button2_flag(){
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	button2_flag =1;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <set_button2_flag+0x14>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000064 	.word	0x20000064

08000770 <isButton2Pressed>:
int isButton2Pressed(){
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
	if(button2_flag ==1){
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <isButton2Pressed+0x20>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d104      	bne.n	8000786 <isButton2Pressed+0x16>
		button2_flag =0;
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <isButton2Pressed+0x20>)
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
		return 1;
 8000782:	2301      	movs	r3, #1
 8000784:	e000      	b.n	8000788 <isButton2Pressed+0x18>
	}
	return 0;
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000064 	.word	0x20000064

08000794 <isButton1Pressed>:
int isButton1Pressed(){
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
	if(button1_flag ==1){
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <isButton1Pressed+0x20>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d104      	bne.n	80007aa <isButton1Pressed+0x16>
		button1_flag =0;
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <isButton1Pressed+0x20>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
		return 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e000      	b.n	80007ac <isButton1Pressed+0x18>
	}
	return 0;
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	20000060 	.word	0x20000060

080007b8 <Button1Press>:
void Button1Press()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <Button1Press+0x90>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a22      	ldr	r2, [pc, #136]	; (800084c <Button1Press+0x94>)
 80007c2:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <Button1Press+0x98>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a1f      	ldr	r2, [pc, #124]	; (8000848 <Button1Press+0x90>)
 80007ca:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80007cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d0:	4820      	ldr	r0, [pc, #128]	; (8000854 <Button1Press+0x9c>)
 80007d2:	f002 f9cd 	bl	8002b70 <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <Button1Press+0x98>)
 80007dc:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) &&(KeyReg1 == KeyReg2)){
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <Button1Press+0x94>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <Button1Press+0x90>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d12b      	bne.n	8000842 <Button1Press+0x8a>
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <Button1Press+0x90>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <Button1Press+0x98>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d125      	bne.n	8000842 <Button1Press+0x8a>
		if(KeyReg3 != KeyReg2){
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <Button1Press+0xa0>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <Button1Press+0x98>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d00d      	beq.n	800081e <Button1Press+0x66>
			KeyReg3 = KeyReg2;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <Button1Press+0x98>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a14      	ldr	r2, [pc, #80]	; (8000858 <Button1Press+0xa0>)
 8000808:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESSED_STATE)
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <Button1Press+0x98>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d117      	bne.n	8000842 <Button1Press+0x8a>
			{
				//TODO
				//subKeyProcess();
				set_button1_flag();
 8000812:	f7ff ff95 	bl	8000740 <set_button1_flag>
				TimerForKeyPress = 200;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <Button1Press+0xa4>)
 8000818:	22c8      	movs	r2, #200	; 0xc8
 800081a:	601a      	str	r2, [r3, #0]

			}

		}
	}
}
 800081c:	e011      	b.n	8000842 <Button1Press+0x8a>
			TimerForKeyPress--;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <Button1Press+0xa4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	3b01      	subs	r3, #1
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <Button1Press+0xa4>)
 8000826:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <Button1Press+0xa4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d108      	bne.n	8000842 <Button1Press+0x8a>
				if(KeyReg2 == PRESSED_STATE)
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <Button1Press+0x98>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d104      	bne.n	8000842 <Button1Press+0x8a>
					set_button1_flag();
 8000838:	f7ff ff82 	bl	8000740 <set_button1_flag>
					TimerForKeyPress = 200;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <Button1Press+0xa4>)
 800083e:	22c8      	movs	r2, #200	; 0xc8
 8000840:	601a      	str	r2, [r3, #0]
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000004 	.word	0x20000004
 800084c:	20000000 	.word	0x20000000
 8000850:	20000008 	.word	0x20000008
 8000854:	40010800 	.word	0x40010800
 8000858:	2000000c 	.word	0x2000000c
 800085c:	20000020 	.word	0x20000020

08000860 <set_duration_main>:
void set_duration_main()
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	KeyReg4 = KeyReg5;
 8000864:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <set_duration_main+0xc0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a2e      	ldr	r2, [pc, #184]	; (8000924 <set_duration_main+0xc4>)
 800086a:	6013      	str	r3, [r2, #0]
	KeyReg5 = KeyReg6;
 800086c:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <set_duration_main+0xc8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a2b      	ldr	r2, [pc, #172]	; (8000920 <set_duration_main+0xc0>)
 8000872:	6013      	str	r3, [r2, #0]
	KeyReg6 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000874:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000878:	482c      	ldr	r0, [pc, #176]	; (800092c <set_duration_main+0xcc>)
 800087a:	f002 f979 	bl	8002b70 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <set_duration_main+0xc8>)
 8000884:	601a      	str	r2, [r3, #0]
	if((KeyReg4 == KeyReg5) &&(KeyReg5 == KeyReg6)){
 8000886:	4b27      	ldr	r3, [pc, #156]	; (8000924 <set_duration_main+0xc4>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	4b25      	ldr	r3, [pc, #148]	; (8000920 <set_duration_main+0xc0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d143      	bne.n	800091a <set_duration_main+0xba>
 8000892:	4b23      	ldr	r3, [pc, #140]	; (8000920 <set_duration_main+0xc0>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4b24      	ldr	r3, [pc, #144]	; (8000928 <set_duration_main+0xc8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	429a      	cmp	r2, r3
 800089c:	d13d      	bne.n	800091a <set_duration_main+0xba>
		if(KeyReg7 != KeyReg6){
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <set_duration_main+0xd0>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <set_duration_main+0xc8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d019      	beq.n	80008de <set_duration_main+0x7e>
			KeyReg7 = KeyReg6;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <set_duration_main+0xc8>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a20      	ldr	r2, [pc, #128]	; (8000930 <set_duration_main+0xd0>)
 80008b0:	6013      	str	r3, [r2, #0]
			if(KeyReg6 == PRESSED_STATE)
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <set_duration_main+0xc8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d12f      	bne.n	800091a <set_duration_main+0xba>
			{
				//TODO
				set_button2_flag();
 80008ba:	f7ff ff4d 	bl	8000758 <set_button2_flag>
				MAN_duration ++;
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <set_duration_main+0xd4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <set_duration_main+0xd4>)
 80008c6:	6013      	str	r3, [r2, #0]
				if(MAN_duration == 100) MAN_duration=0;	//reset if man_duaration ==100
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <set_duration_main+0xd4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b64      	cmp	r3, #100	; 0x64
 80008ce:	d102      	bne.n	80008d6 <set_duration_main+0x76>
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <set_duration_main+0xd4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
				TimerForKeyPress = 200;
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <set_duration_main+0xd8>)
 80008d8:	22c8      	movs	r2, #200	; 0xc8
 80008da:	601a      	str	r2, [r3, #0]

			}

		}
	}
}
 80008dc:	e01d      	b.n	800091a <set_duration_main+0xba>
			TimerForKeyPress--;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <set_duration_main+0xd8>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <set_duration_main+0xd8>)
 80008e6:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <set_duration_main+0xd8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d114      	bne.n	800091a <set_duration_main+0xba>
				if(KeyReg6 == PRESSED_STATE)
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <set_duration_main+0xc8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d110      	bne.n	800091a <set_duration_main+0xba>
					set_button2_flag();
 80008f8:	f7ff ff2e 	bl	8000758 <set_button2_flag>
					MAN_duration ++;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <set_duration_main+0xd4>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <set_duration_main+0xd4>)
 8000904:	6013      	str	r3, [r2, #0]
					if(MAN_duration == 100) MAN_duration=0;	//reset if man_duaration ==100
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <set_duration_main+0xd4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b64      	cmp	r3, #100	; 0x64
 800090c:	d102      	bne.n	8000914 <set_duration_main+0xb4>
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <set_duration_main+0xd4>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
					TimerForKeyPress = 200;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <set_duration_main+0xd8>)
 8000916:	22c8      	movs	r2, #200	; 0xc8
 8000918:	601a      	str	r2, [r3, #0]
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000014 	.word	0x20000014
 8000924:	20000010 	.word	0x20000010
 8000928:	20000018 	.word	0x20000018
 800092c:	40010800 	.word	0x40010800
 8000930:	2000001c 	.word	0x2000001c
 8000934:	2000006c 	.word	0x2000006c
 8000938:	20000020 	.word	0x20000020

0800093c <fsm_automatic_run>:
 *  Created on: Oct 18, 2023
 *      Author: Admin
 */
#include "fsm_automatic.h"

void fsm_automatic_run(){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	 switch (status){
 8000940:	4b71      	ldr	r3, [pc, #452]	; (8000b08 <fsm_automatic_run+0x1cc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3b01      	subs	r3, #1
 8000946:	2b03      	cmp	r3, #3
 8000948:	f200 80d5 	bhi.w	8000af6 <fsm_automatic_run+0x1ba>
 800094c:	a201      	add	r2, pc, #4	; (adr r2, 8000954 <fsm_automatic_run+0x18>)
 800094e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000952:	bf00      	nop
 8000954:	08000965 	.word	0x08000965
 8000958:	080009ad 	.word	0x080009ad
 800095c:	08000a2b 	.word	0x08000a2b
 8000960:	08000a81 	.word	0x08000a81
	 case INIT:
		 clear();
 8000964:	f001 fb2c 	bl	8001fc0 <clear>

		 status = AUTO_RED;
 8000968:	4b67      	ldr	r3, [pc, #412]	; (8000b08 <fsm_automatic_run+0x1cc>)
 800096a:	2202      	movs	r2, #2
 800096c:	601a      	str	r2, [r3, #0]
		 set_Timer1((int)(red_duration*100));
 800096e:	4b67      	ldr	r3, [pc, #412]	; (8000b0c <fsm_automatic_run+0x1d0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4967      	ldr	r1, [pc, #412]	; (8000b10 <fsm_automatic_run+0x1d4>)
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fcf7 	bl	8000368 <__aeabi_fmul>
 800097a:	4603      	mov	r3, r0
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff feb9 	bl	80006f4 <__aeabi_f2iz>
 8000982:	4603      	mov	r3, r0
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fc5f 	bl	8002248 <set_Timer1>
		 set_Timer2((int)(green_duration*100));
 800098a:	4b62      	ldr	r3, [pc, #392]	; (8000b14 <fsm_automatic_run+0x1d8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4960      	ldr	r1, [pc, #384]	; (8000b10 <fsm_automatic_run+0x1d4>)
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fce9 	bl	8000368 <__aeabi_fmul>
 8000996:	4603      	mov	r3, r0
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff feab 	bl	80006f4 <__aeabi_f2iz>
 800099e:	4603      	mov	r3, r0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 fc65 	bl	8002270 <set_Timer2>
		 set_green_follow();
 80009a6:	f001 fa2f 	bl	8001e08 <set_green_follow>

		 break;
 80009aa:	e0ab      	b.n	8000b04 <fsm_automatic_run+0x1c8>
	 case AUTO_RED:
		 set_red();
 80009ac:	f001 f9d4 	bl	8001d58 <set_red>
		 if(timer2_flag ==1)
 80009b0:	4b59      	ldr	r3, [pc, #356]	; (8000b18 <fsm_automatic_run+0x1dc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d10f      	bne.n	80009d8 <fsm_automatic_run+0x9c>
		 {
			 set_yellow_follow();
 80009b8:	f001 fa3c 	bl	8001e34 <set_yellow_follow>
			 set_Timer2((int)(yellow_duration*100));
 80009bc:	4b57      	ldr	r3, [pc, #348]	; (8000b1c <fsm_automatic_run+0x1e0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4953      	ldr	r1, [pc, #332]	; (8000b10 <fsm_automatic_run+0x1d4>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fcd0 	bl	8000368 <__aeabi_fmul>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe92 	bl	80006f4 <__aeabi_f2iz>
 80009d0:	4603      	mov	r3, r0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fc4c 	bl	8002270 <set_Timer2>
		 }
		 if(timer1_flag ==1)
 80009d8:	4b51      	ldr	r3, [pc, #324]	; (8000b20 <fsm_automatic_run+0x1e4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d114      	bne.n	8000a0a <fsm_automatic_run+0xce>
		 {
			 status = AUTO_GREEN;
 80009e0:	4b49      	ldr	r3, [pc, #292]	; (8000b08 <fsm_automatic_run+0x1cc>)
 80009e2:	2203      	movs	r2, #3
 80009e4:	601a      	str	r2, [r3, #0]
			 set_Timer1((int)(green_duration*100));
 80009e6:	4b4b      	ldr	r3, [pc, #300]	; (8000b14 <fsm_automatic_run+0x1d8>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4949      	ldr	r1, [pc, #292]	; (8000b10 <fsm_automatic_run+0x1d4>)
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fcbb 	bl	8000368 <__aeabi_fmul>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fe7d 	bl	80006f4 <__aeabi_f2iz>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 fc23 	bl	8002248 <set_Timer1>
			 reset_counter();				//for counting down time
 8000a02:	f000 f891 	bl	8000b28 <reset_counter>
			 reset_counter_follow();
 8000a06:	f000 f8ad 	bl	8000b64 <reset_counter_follow>
		 }
		 if(isButton1Pressed()==1)
 8000a0a:	f7ff fec3 	bl	8000794 <isButton1Pressed>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d172      	bne.n	8000afa <fsm_automatic_run+0x1be>
		 {
			 MAN_duration =0;
 8000a14:	4b43      	ldr	r3, [pc, #268]	; (8000b24 <fsm_automatic_run+0x1e8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
			 status = MAN_INIT;
 8000a1a:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <fsm_automatic_run+0x1cc>)
 8000a1c:	220d      	movs	r2, #13
 8000a1e:	601a      	str	r2, [r3, #0]
			 set_Timer1(1000);
 8000a20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a24:	f001 fc10 	bl	8002248 <set_Timer1>
		 }
		 break;
 8000a28:	e067      	b.n	8000afa <fsm_automatic_run+0x1be>
	 case AUTO_GREEN:
		 set_green();
 8000a2a:	f001 f9ab 	bl	8001d84 <set_green>
		 set_red_follow();
 8000a2e:	f001 f9d5 	bl	8001ddc <set_red_follow>
		 if(timer1_flag ==1)
 8000a32:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <fsm_automatic_run+0x1e4>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d112      	bne.n	8000a60 <fsm_automatic_run+0x124>
		 {

			 status = AUTO_YELLOW;
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <fsm_automatic_run+0x1cc>)
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	601a      	str	r2, [r3, #0]
			 set_Timer1((int)(yellow_duration*100));
 8000a40:	4b36      	ldr	r3, [pc, #216]	; (8000b1c <fsm_automatic_run+0x1e0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4932      	ldr	r1, [pc, #200]	; (8000b10 <fsm_automatic_run+0x1d4>)
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fc8e 	bl	8000368 <__aeabi_fmul>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fe50 	bl	80006f4 <__aeabi_f2iz>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fbf6 	bl	8002248 <set_Timer1>
			 reset_counter();				//for counting down time
 8000a5c:	f000 f864 	bl	8000b28 <reset_counter>
		 }
		 if(isButton1Pressed()==1)
 8000a60:	f7ff fe98 	bl	8000794 <isButton1Pressed>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d149      	bne.n	8000afe <fsm_automatic_run+0x1c2>
		 {
			 MAN_duration =0;
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <fsm_automatic_run+0x1e8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
			 status = MAN_INIT;
 8000a70:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <fsm_automatic_run+0x1cc>)
 8000a72:	220d      	movs	r2, #13
 8000a74:	601a      	str	r2, [r3, #0]
			 set_Timer1(1000);
 8000a76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a7a:	f001 fbe5 	bl	8002248 <set_Timer1>
		 }

		 break;
 8000a7e:	e03e      	b.n	8000afe <fsm_automatic_run+0x1c2>
	 case AUTO_YELLOW:
		 set_yellow();
 8000a80:	f001 f996 	bl	8001db0 <set_yellow>
		 set_red_follow();
 8000a84:	f001 f9aa 	bl	8001ddc <set_red_follow>
		 if(timer1_flag ==1)
 8000a88:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <fsm_automatic_run+0x1e4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d122      	bne.n	8000ad6 <fsm_automatic_run+0x19a>
		 {
			 status = AUTO_RED;
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <fsm_automatic_run+0x1cc>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	601a      	str	r2, [r3, #0]
			 set_Timer1((int)(red_duration*100));
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <fsm_automatic_run+0x1d0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	491d      	ldr	r1, [pc, #116]	; (8000b10 <fsm_automatic_run+0x1d4>)
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fc63 	bl	8000368 <__aeabi_fmul>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe25 	bl	80006f4 <__aeabi_f2iz>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fbcb 	bl	8002248 <set_Timer1>
			 set_Timer2((int)(green_duration*100));
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <fsm_automatic_run+0x1d8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4916      	ldr	r1, [pc, #88]	; (8000b10 <fsm_automatic_run+0x1d4>)
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fc55 	bl	8000368 <__aeabi_fmul>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fe17 	bl	80006f4 <__aeabi_f2iz>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 fbd1 	bl	8002270 <set_Timer2>
			 set_green_follow();
 8000ace:	f001 f99b 	bl	8001e08 <set_green_follow>
			 reset_counter();				//for counting down time
 8000ad2:	f000 f829 	bl	8000b28 <reset_counter>
		 }
		 if(isButton1Pressed()==1)
 8000ad6:	f7ff fe5d 	bl	8000794 <isButton1Pressed>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d110      	bne.n	8000b02 <fsm_automatic_run+0x1c6>
		 {
			 MAN_duration =0;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <fsm_automatic_run+0x1e8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
			 status = MAN_INIT;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <fsm_automatic_run+0x1cc>)
 8000ae8:	220d      	movs	r2, #13
 8000aea:	601a      	str	r2, [r3, #0]
			 set_Timer1(1000);
 8000aec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af0:	f001 fbaa 	bl	8002248 <set_Timer1>
		 }
		 break;
 8000af4:	e005      	b.n	8000b02 <fsm_automatic_run+0x1c6>
	 default:
		 break;
 8000af6:	bf00      	nop
 8000af8:	e004      	b.n	8000b04 <fsm_automatic_run+0x1c8>
		 break;
 8000afa:	bf00      	nop
 8000afc:	e002      	b.n	8000b04 <fsm_automatic_run+0x1c8>
		 break;
 8000afe:	bf00      	nop
 8000b00:	e000      	b.n	8000b04 <fsm_automatic_run+0x1c8>
		 break;
 8000b02:	bf00      	nop
	 }
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000068 	.word	0x20000068
 8000b0c:	20000024 	.word	0x20000024
 8000b10:	42c80000 	.word	0x42c80000
 8000b14:	20000028 	.word	0x20000028
 8000b18:	20000098 	.word	0x20000098
 8000b1c:	2000002c 	.word	0x2000002c
 8000b20:	20000090 	.word	0x20000090
 8000b24:	2000006c 	.word	0x2000006c

08000b28 <reset_counter>:
void reset_counter(){
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	red_counter = red_duration;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <reset_counter+0x24>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <reset_counter+0x28>)
 8000b32:	6013      	str	r3, [r2, #0]
	green_counter=green_duration;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <reset_counter+0x2c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <reset_counter+0x30>)
 8000b3a:	6013      	str	r3, [r2, #0]
	yellow_counter=yellow_duration;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <reset_counter+0x34>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <reset_counter+0x38>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000024 	.word	0x20000024
 8000b50:	20000078 	.word	0x20000078
 8000b54:	20000028 	.word	0x20000028
 8000b58:	2000007c 	.word	0x2000007c
 8000b5c:	2000002c 	.word	0x2000002c
 8000b60:	20000080 	.word	0x20000080

08000b64 <reset_counter_follow>:
void reset_counter_follow(){
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
	red_counter_1 = red_duration;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <reset_counter_follow+0x24>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <reset_counter_follow+0x28>)
 8000b6e:	6013      	str	r3, [r2, #0]
	green_counter_1=green_duration;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <reset_counter_follow+0x2c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <reset_counter_follow+0x30>)
 8000b76:	6013      	str	r3, [r2, #0]
	yellow_counter_1=yellow_duration;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <reset_counter_follow+0x34>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <reset_counter_follow+0x38>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	20000024 	.word	0x20000024
 8000b8c:	20000084 	.word	0x20000084
 8000b90:	20000028 	.word	0x20000028
 8000b94:	20000088 	.word	0x20000088
 8000b98:	2000002c 	.word	0x2000002c
 8000b9c:	2000008c 	.word	0x2000008c

08000ba0 <traffic_7Segment_led>:
void traffic_7Segment_led(){
 8000ba0:	b598      	push	{r3, r4, r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	switch(status){
 8000ba4:	4b8b      	ldr	r3, [pc, #556]	; (8000dd4 <traffic_7Segment_led+0x234>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	f200 8108 	bhi.w	8000dc0 <traffic_7Segment_led+0x220>
 8000bb0:	a201      	add	r2, pc, #4	; (adr r2, 8000bb8 <traffic_7Segment_led+0x18>)
 8000bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb6:	bf00      	nop
 8000bb8:	08000bc9 	.word	0x08000bc9
 8000bbc:	08000bd5 	.word	0x08000bd5
 8000bc0:	08000c7b 	.word	0x08000c7b
 8000bc4:	08000d1f 	.word	0x08000d1f
	case INIT:
		timer3_flag=1;			//timer for led 7 segment admin
 8000bc8:	4b83      	ldr	r3, [pc, #524]	; (8000dd8 <traffic_7Segment_led+0x238>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
		reset_counter();
 8000bce:	f7ff ffab 	bl	8000b28 <reset_counter>
		break;
 8000bd2:	e0fc      	b.n	8000dce <traffic_7Segment_led+0x22e>
	case AUTO_RED:
		if(timer3_flag==1 && led ==0){
 8000bd4:	4b80      	ldr	r3, [pc, #512]	; (8000dd8 <traffic_7Segment_led+0x238>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d11b      	bne.n	8000c14 <traffic_7Segment_led+0x74>
 8000bdc:	4b7f      	ldr	r3, [pc, #508]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d117      	bne.n	8000c14 <traffic_7Segment_led+0x74>
			set_7Segment_1(led, red_counter/10);
 8000be4:	4b7d      	ldr	r3, [pc, #500]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000be6:	681c      	ldr	r4, [r3, #0]
 8000be8:	4b7d      	ldr	r3, [pc, #500]	; (8000de0 <traffic_7Segment_led+0x240>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	497d      	ldr	r1, [pc, #500]	; (8000de4 <traffic_7Segment_led+0x244>)
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fc6e 	bl	80004d0 <__aeabi_fdiv>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fd7c 	bl	80006f4 <__aeabi_f2iz>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4620      	mov	r0, r4
 8000c02:	f000 fef9 	bl	80019f8 <set_7Segment_1>
			led = 1;
 8000c06:	4b75      	ldr	r3, [pc, #468]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]
			set_Timer3(50);
 8000c0c:	2032      	movs	r0, #50	; 0x32
 8000c0e:	f001 fb43 	bl	8002298 <set_Timer3>
			red_counter--;
			led =0;
			set_Timer3(50);
		}

		break;
 8000c12:	e0d7      	b.n	8000dc4 <traffic_7Segment_led+0x224>
		else if(timer3_flag==1 && led ==1){
 8000c14:	4b70      	ldr	r3, [pc, #448]	; (8000dd8 <traffic_7Segment_led+0x238>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	f040 80d3 	bne.w	8000dc4 <traffic_7Segment_led+0x224>
 8000c1e:	4b6f      	ldr	r3, [pc, #444]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	f040 80ce 	bne.w	8000dc4 <traffic_7Segment_led+0x224>
			set_7Segment_1(led, (int)red_counter%10);
 8000c28:	4b6c      	ldr	r3, [pc, #432]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000c2a:	681c      	ldr	r4, [r3, #0]
 8000c2c:	4b6c      	ldr	r3, [pc, #432]	; (8000de0 <traffic_7Segment_led+0x240>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fd5f 	bl	80006f4 <__aeabi_f2iz>
 8000c36:	4601      	mov	r1, r0
 8000c38:	4b6b      	ldr	r3, [pc, #428]	; (8000de8 <traffic_7Segment_led+0x248>)
 8000c3a:	fb83 2301 	smull	r2, r3, r3, r1
 8000c3e:	109a      	asrs	r2, r3, #2
 8000c40:	17cb      	asrs	r3, r1, #31
 8000c42:	1ad2      	subs	r2, r2, r3
 8000c44:	4613      	mov	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	1aca      	subs	r2, r1, r3
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4620      	mov	r0, r4
 8000c52:	f000 fed1 	bl	80019f8 <set_7Segment_1>
			red_counter--;
 8000c56:	4b62      	ldr	r3, [pc, #392]	; (8000de0 <traffic_7Segment_led+0x240>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fa78 	bl	8000154 <__aeabi_fsub>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b5d      	ldr	r3, [pc, #372]	; (8000de0 <traffic_7Segment_led+0x240>)
 8000c6a:	601a      	str	r2, [r3, #0]
			led =0;
 8000c6c:	4b5b      	ldr	r3, [pc, #364]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
			set_Timer3(50);
 8000c72:	2032      	movs	r0, #50	; 0x32
 8000c74:	f001 fb10 	bl	8002298 <set_Timer3>
		break;
 8000c78:	e0a4      	b.n	8000dc4 <traffic_7Segment_led+0x224>
	case AUTO_GREEN:
		if(timer3_flag==1 && led ==0){
 8000c7a:	4b57      	ldr	r3, [pc, #348]	; (8000dd8 <traffic_7Segment_led+0x238>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d11b      	bne.n	8000cba <traffic_7Segment_led+0x11a>
 8000c82:	4b56      	ldr	r3, [pc, #344]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d117      	bne.n	8000cba <traffic_7Segment_led+0x11a>
			set_7Segment_1(led, green_counter/10);
 8000c8a:	4b54      	ldr	r3, [pc, #336]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000c8c:	681c      	ldr	r4, [r3, #0]
 8000c8e:	4b57      	ldr	r3, [pc, #348]	; (8000dec <traffic_7Segment_led+0x24c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4954      	ldr	r1, [pc, #336]	; (8000de4 <traffic_7Segment_led+0x244>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fc1b 	bl	80004d0 <__aeabi_fdiv>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fd29 	bl	80006f4 <__aeabi_f2iz>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f000 fea6 	bl	80019f8 <set_7Segment_1>
			led = 1;
 8000cac:	4b4b      	ldr	r3, [pc, #300]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]
			set_Timer3(50);
 8000cb2:	2032      	movs	r0, #50	; 0x32
 8000cb4:	f001 faf0 	bl	8002298 <set_Timer3>
			green_counter--;
			led = 0;
			set_Timer3(50);
		}

		break;
 8000cb8:	e086      	b.n	8000dc8 <traffic_7Segment_led+0x228>
		else if(timer3_flag==1 && led ==1){
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <traffic_7Segment_led+0x238>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	f040 8082 	bne.w	8000dc8 <traffic_7Segment_led+0x228>
 8000cc4:	4b45      	ldr	r3, [pc, #276]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d17d      	bne.n	8000dc8 <traffic_7Segment_led+0x228>
			set_7Segment_1(led, (int)green_counter%10);
 8000ccc:	4b43      	ldr	r3, [pc, #268]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000cce:	681c      	ldr	r4, [r3, #0]
 8000cd0:	4b46      	ldr	r3, [pc, #280]	; (8000dec <traffic_7Segment_led+0x24c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fd0d 	bl	80006f4 <__aeabi_f2iz>
 8000cda:	4601      	mov	r1, r0
 8000cdc:	4b42      	ldr	r3, [pc, #264]	; (8000de8 <traffic_7Segment_led+0x248>)
 8000cde:	fb83 2301 	smull	r2, r3, r3, r1
 8000ce2:	109a      	asrs	r2, r3, #2
 8000ce4:	17cb      	asrs	r3, r1, #31
 8000ce6:	1ad2      	subs	r2, r2, r3
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	1aca      	subs	r2, r1, r3
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f000 fe7f 	bl	80019f8 <set_7Segment_1>
			green_counter--;
 8000cfa:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <traffic_7Segment_led+0x24c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fa26 	bl	8000154 <__aeabi_fsub>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b37      	ldr	r3, [pc, #220]	; (8000dec <traffic_7Segment_led+0x24c>)
 8000d0e:	601a      	str	r2, [r3, #0]
			led = 0;
 8000d10:	4b32      	ldr	r3, [pc, #200]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
			set_Timer3(50);
 8000d16:	2032      	movs	r0, #50	; 0x32
 8000d18:	f001 fabe 	bl	8002298 <set_Timer3>
		break;
 8000d1c:	e054      	b.n	8000dc8 <traffic_7Segment_led+0x228>
	case AUTO_YELLOW:
		if(timer3_flag==1 && led ==0){
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <traffic_7Segment_led+0x238>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d11b      	bne.n	8000d5e <traffic_7Segment_led+0x1be>
 8000d26:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d117      	bne.n	8000d5e <traffic_7Segment_led+0x1be>
			set_7Segment_1(led, yellow_counter/10);
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000d30:	681c      	ldr	r4, [r3, #0]
 8000d32:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <traffic_7Segment_led+0x250>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	492b      	ldr	r1, [pc, #172]	; (8000de4 <traffic_7Segment_led+0x244>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fbc9 	bl	80004d0 <__aeabi_fdiv>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fcd7 	bl	80006f4 <__aeabi_f2iz>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f000 fe54 	bl	80019f8 <set_7Segment_1>
			led = 1;
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
			set_Timer3(50);
 8000d56:	2032      	movs	r0, #50	; 0x32
 8000d58:	f001 fa9e 	bl	8002298 <set_Timer3>
			yellow_counter--;
			led = 0;
			set_Timer3(50);
		}

		break;
 8000d5c:	e036      	b.n	8000dcc <traffic_7Segment_led+0x22c>
		else if(timer3_flag==1 && led ==1){
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <traffic_7Segment_led+0x238>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d132      	bne.n	8000dcc <traffic_7Segment_led+0x22c>
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d12e      	bne.n	8000dcc <traffic_7Segment_led+0x22c>
			set_7Segment_1(led, (int)yellow_counter%10);
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000d70:	681c      	ldr	r4, [r3, #0]
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <traffic_7Segment_led+0x250>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fcbc 	bl	80006f4 <__aeabi_f2iz>
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <traffic_7Segment_led+0x248>)
 8000d80:	fb83 2301 	smull	r2, r3, r3, r1
 8000d84:	109a      	asrs	r2, r3, #2
 8000d86:	17cb      	asrs	r3, r1, #31
 8000d88:	1ad2      	subs	r2, r2, r3
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	1aca      	subs	r2, r1, r3
 8000d94:	4611      	mov	r1, r2
 8000d96:	4620      	mov	r0, r4
 8000d98:	f000 fe2e 	bl	80019f8 <set_7Segment_1>
			yellow_counter--;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <traffic_7Segment_led+0x250>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff f9d5 	bl	8000154 <__aeabi_fsub>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <traffic_7Segment_led+0x250>)
 8000db0:	601a      	str	r2, [r3, #0]
			led = 0;
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <traffic_7Segment_led+0x23c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
			set_Timer3(50);
 8000db8:	2032      	movs	r0, #50	; 0x32
 8000dba:	f001 fa6d 	bl	8002298 <set_Timer3>
		break;
 8000dbe:	e005      	b.n	8000dcc <traffic_7Segment_led+0x22c>
	default:
		break;
 8000dc0:	bf00      	nop
 8000dc2:	e004      	b.n	8000dce <traffic_7Segment_led+0x22e>
		break;
 8000dc4:	bf00      	nop
 8000dc6:	e002      	b.n	8000dce <traffic_7Segment_led+0x22e>
		break;
 8000dc8:	bf00      	nop
 8000dca:	e000      	b.n	8000dce <traffic_7Segment_led+0x22e>
		break;
 8000dcc:	bf00      	nop
	}
}
 8000dce:	bf00      	nop
 8000dd0:	bd98      	pop	{r3, r4, r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000068 	.word	0x20000068
 8000dd8:	200000a0 	.word	0x200000a0
 8000ddc:	20000070 	.word	0x20000070
 8000de0:	20000078 	.word	0x20000078
 8000de4:	41200000 	.word	0x41200000
 8000de8:	66666667 	.word	0x66666667
 8000dec:	2000007c 	.word	0x2000007c
 8000df0:	20000080 	.word	0x20000080

08000df4 <traffic_7Segment_led1>:
void traffic_7Segment_led1(){
 8000df4:	b598      	push	{r3, r4, r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	switch(status){
 8000df8:	4b9d      	ldr	r3, [pc, #628]	; (8001070 <traffic_7Segment_led1+0x27c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	f200 8177 	bhi.w	80010f2 <traffic_7Segment_led1+0x2fe>
 8000e04:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <traffic_7Segment_led1+0x18>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000e29 	.word	0x08000e29
 8000e14:	08000f8b 	.word	0x08000f8b
 8000e18:	08001031 	.word	0x08001031
		case INIT:
			timer4_flag=1;			//timer for led 7 segment admin
 8000e1c:	4b95      	ldr	r3, [pc, #596]	; (8001074 <traffic_7Segment_led1+0x280>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	601a      	str	r2, [r3, #0]
			reset_counter_follow();
 8000e22:	f7ff fe9f 	bl	8000b64 <reset_counter_follow>
			break;
 8000e26:	e16b      	b.n	8001100 <traffic_7Segment_led1+0x30c>
		case AUTO_RED:
			if(green_counter_1<0){
 8000e28:	4b93      	ldr	r3, [pc, #588]	; (8001078 <traffic_7Segment_led1+0x284>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f04f 0100 	mov.w	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fc37 	bl	80006a4 <__aeabi_fcmplt>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d052      	beq.n	8000ee2 <traffic_7Segment_led1+0xee>
				if(timer4_flag==1 && led1 ==0){		//yellow follow led
 8000e3c:	4b8d      	ldr	r3, [pc, #564]	; (8001074 <traffic_7Segment_led1+0x280>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d11b      	bne.n	8000e7c <traffic_7Segment_led1+0x88>
 8000e44:	4b8d      	ldr	r3, [pc, #564]	; (800107c <traffic_7Segment_led1+0x288>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d117      	bne.n	8000e7c <traffic_7Segment_led1+0x88>
					set_7Segment_2(led1, yellow_counter_1/10);
 8000e4c:	4b8b      	ldr	r3, [pc, #556]	; (800107c <traffic_7Segment_led1+0x288>)
 8000e4e:	681c      	ldr	r4, [r3, #0]
 8000e50:	4b8b      	ldr	r3, [pc, #556]	; (8001080 <traffic_7Segment_led1+0x28c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	498b      	ldr	r1, [pc, #556]	; (8001084 <traffic_7Segment_led1+0x290>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fb3a 	bl	80004d0 <__aeabi_fdiv>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fc48 	bl	80006f4 <__aeabi_f2iz>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4619      	mov	r1, r3
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f000 fbcd 	bl	8001608 <set_7Segment_2>
					led1 = 1;
 8000e6e:	4b83      	ldr	r3, [pc, #524]	; (800107c <traffic_7Segment_led1+0x288>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
					set_Timer4(50);
 8000e74:	2032      	movs	r0, #50	; 0x32
 8000e76:	f001 fa23 	bl	80022c0 <set_Timer4>
 8000e7a:	e085      	b.n	8000f88 <traffic_7Segment_led1+0x194>
				}
				else if(timer4_flag==1 && led1 ==1){
 8000e7c:	4b7d      	ldr	r3, [pc, #500]	; (8001074 <traffic_7Segment_led1+0x280>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	f040 8138 	bne.w	80010f6 <traffic_7Segment_led1+0x302>
 8000e86:	4b7d      	ldr	r3, [pc, #500]	; (800107c <traffic_7Segment_led1+0x288>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	f040 8133 	bne.w	80010f6 <traffic_7Segment_led1+0x302>
					set_7Segment_2(led1, (int)yellow_counter_1%10);
 8000e90:	4b7a      	ldr	r3, [pc, #488]	; (800107c <traffic_7Segment_led1+0x288>)
 8000e92:	681c      	ldr	r4, [r3, #0]
 8000e94:	4b7a      	ldr	r3, [pc, #488]	; (8001080 <traffic_7Segment_led1+0x28c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fc2b 	bl	80006f4 <__aeabi_f2iz>
 8000e9e:	4601      	mov	r1, r0
 8000ea0:	4b79      	ldr	r3, [pc, #484]	; (8001088 <traffic_7Segment_led1+0x294>)
 8000ea2:	fb83 2301 	smull	r2, r3, r3, r1
 8000ea6:	109a      	asrs	r2, r3, #2
 8000ea8:	17cb      	asrs	r3, r1, #31
 8000eaa:	1ad2      	subs	r2, r2, r3
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	1aca      	subs	r2, r1, r3
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f000 fba5 	bl	8001608 <set_7Segment_2>
					yellow_counter_1--;
 8000ebe:	4b70      	ldr	r3, [pc, #448]	; (8001080 <traffic_7Segment_led1+0x28c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff f944 	bl	8000154 <__aeabi_fsub>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b6b      	ldr	r3, [pc, #428]	; (8001080 <traffic_7Segment_led1+0x28c>)
 8000ed2:	601a      	str	r2, [r3, #0]
					led1 =0;
 8000ed4:	4b69      	ldr	r3, [pc, #420]	; (800107c <traffic_7Segment_led1+0x288>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
					set_Timer4(50);
 8000eda:	2032      	movs	r0, #50	; 0x32
 8000edc:	f001 f9f0 	bl	80022c0 <set_Timer4>
				set_7Segment_2(led1, (int)green_counter_1%10);
				green_counter_1--;
				led1 =0;
				set_Timer4(50);
			}
			break;
 8000ee0:	e109      	b.n	80010f6 <traffic_7Segment_led1+0x302>
			else if(timer4_flag==1 && led1 ==0){		//green follow led
 8000ee2:	4b64      	ldr	r3, [pc, #400]	; (8001074 <traffic_7Segment_led1+0x280>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d11b      	bne.n	8000f22 <traffic_7Segment_led1+0x12e>
 8000eea:	4b64      	ldr	r3, [pc, #400]	; (800107c <traffic_7Segment_led1+0x288>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d117      	bne.n	8000f22 <traffic_7Segment_led1+0x12e>
				set_7Segment_2(led1, green_counter_1/10);
 8000ef2:	4b62      	ldr	r3, [pc, #392]	; (800107c <traffic_7Segment_led1+0x288>)
 8000ef4:	681c      	ldr	r4, [r3, #0]
 8000ef6:	4b60      	ldr	r3, [pc, #384]	; (8001078 <traffic_7Segment_led1+0x284>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4962      	ldr	r1, [pc, #392]	; (8001084 <traffic_7Segment_led1+0x290>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fae7 	bl	80004d0 <__aeabi_fdiv>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fbf5 	bl	80006f4 <__aeabi_f2iz>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f000 fb7a 	bl	8001608 <set_7Segment_2>
				led1 = 1;
 8000f14:	4b59      	ldr	r3, [pc, #356]	; (800107c <traffic_7Segment_led1+0x288>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	601a      	str	r2, [r3, #0]
				set_Timer4(50);
 8000f1a:	2032      	movs	r0, #50	; 0x32
 8000f1c:	f001 f9d0 	bl	80022c0 <set_Timer4>
 8000f20:	e032      	b.n	8000f88 <traffic_7Segment_led1+0x194>
			else if(timer4_flag==1 && led1 ==1){
 8000f22:	4b54      	ldr	r3, [pc, #336]	; (8001074 <traffic_7Segment_led1+0x280>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	f040 80e5 	bne.w	80010f6 <traffic_7Segment_led1+0x302>
 8000f2c:	4b53      	ldr	r3, [pc, #332]	; (800107c <traffic_7Segment_led1+0x288>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	f040 80e0 	bne.w	80010f6 <traffic_7Segment_led1+0x302>
				set_7Segment_2(led1, (int)green_counter_1%10);
 8000f36:	4b51      	ldr	r3, [pc, #324]	; (800107c <traffic_7Segment_led1+0x288>)
 8000f38:	681c      	ldr	r4, [r3, #0]
 8000f3a:	4b4f      	ldr	r3, [pc, #316]	; (8001078 <traffic_7Segment_led1+0x284>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fbd8 	bl	80006f4 <__aeabi_f2iz>
 8000f44:	4601      	mov	r1, r0
 8000f46:	4b50      	ldr	r3, [pc, #320]	; (8001088 <traffic_7Segment_led1+0x294>)
 8000f48:	fb83 2301 	smull	r2, r3, r3, r1
 8000f4c:	109a      	asrs	r2, r3, #2
 8000f4e:	17cb      	asrs	r3, r1, #31
 8000f50:	1ad2      	subs	r2, r2, r3
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	1aca      	subs	r2, r1, r3
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f000 fb52 	bl	8001608 <set_7Segment_2>
				green_counter_1--;
 8000f64:	4b44      	ldr	r3, [pc, #272]	; (8001078 <traffic_7Segment_led1+0x284>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff f8f1 	bl	8000154 <__aeabi_fsub>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b40      	ldr	r3, [pc, #256]	; (8001078 <traffic_7Segment_led1+0x284>)
 8000f78:	601a      	str	r2, [r3, #0]
				led1 =0;
 8000f7a:	4b40      	ldr	r3, [pc, #256]	; (800107c <traffic_7Segment_led1+0x288>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
				set_Timer4(50);
 8000f80:	2032      	movs	r0, #50	; 0x32
 8000f82:	f001 f99d 	bl	80022c0 <set_Timer4>
			break;
 8000f86:	e0b6      	b.n	80010f6 <traffic_7Segment_led1+0x302>
 8000f88:	e0b5      	b.n	80010f6 <traffic_7Segment_led1+0x302>
		case AUTO_GREEN:
			if(timer4_flag==1 && led1 ==0){
 8000f8a:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <traffic_7Segment_led1+0x280>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d11b      	bne.n	8000fca <traffic_7Segment_led1+0x1d6>
 8000f92:	4b3a      	ldr	r3, [pc, #232]	; (800107c <traffic_7Segment_led1+0x288>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d117      	bne.n	8000fca <traffic_7Segment_led1+0x1d6>
				set_7Segment_2(led1, red_counter_1/10);
 8000f9a:	4b38      	ldr	r3, [pc, #224]	; (800107c <traffic_7Segment_led1+0x288>)
 8000f9c:	681c      	ldr	r4, [r3, #0]
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	; (800108c <traffic_7Segment_led1+0x298>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4938      	ldr	r1, [pc, #224]	; (8001084 <traffic_7Segment_led1+0x290>)
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa93 	bl	80004d0 <__aeabi_fdiv>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fba1 	bl	80006f4 <__aeabi_f2iz>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f000 fb26 	bl	8001608 <set_7Segment_2>
				led1 = 1;
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <traffic_7Segment_led1+0x288>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
				set_Timer4(50);
 8000fc2:	2032      	movs	r0, #50	; 0x32
 8000fc4:	f001 f97c 	bl	80022c0 <set_Timer4>
				set_7Segment_2(led1, (int)red_counter_1%10);
				red_counter_1--;
				led1 = 0;
				set_Timer4(50);
			}
			break;
 8000fc8:	e097      	b.n	80010fa <traffic_7Segment_led1+0x306>
			else if(timer4_flag==1 && led1 ==1){
 8000fca:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <traffic_7Segment_led1+0x280>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	f040 8093 	bne.w	80010fa <traffic_7Segment_led1+0x306>
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <traffic_7Segment_led1+0x288>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	f040 808e 	bne.w	80010fa <traffic_7Segment_led1+0x306>
				set_7Segment_2(led1, (int)red_counter_1%10);
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <traffic_7Segment_led1+0x288>)
 8000fe0:	681c      	ldr	r4, [r3, #0]
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <traffic_7Segment_led1+0x298>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fb84 	bl	80006f4 <__aeabi_f2iz>
 8000fec:	4601      	mov	r1, r0
 8000fee:	4b26      	ldr	r3, [pc, #152]	; (8001088 <traffic_7Segment_led1+0x294>)
 8000ff0:	fb83 2301 	smull	r2, r3, r3, r1
 8000ff4:	109a      	asrs	r2, r3, #2
 8000ff6:	17cb      	asrs	r3, r1, #31
 8000ff8:	1ad2      	subs	r2, r2, r3
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	1aca      	subs	r2, r1, r3
 8001004:	4611      	mov	r1, r2
 8001006:	4620      	mov	r0, r4
 8001008:	f000 fafe 	bl	8001608 <set_7Segment_2>
				red_counter_1--;
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <traffic_7Segment_led1+0x298>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff f89d 	bl	8000154 <__aeabi_fsub>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <traffic_7Segment_led1+0x298>)
 8001020:	601a      	str	r2, [r3, #0]
				led1 = 0;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <traffic_7Segment_led1+0x288>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
				set_Timer4(50);
 8001028:	2032      	movs	r0, #50	; 0x32
 800102a:	f001 f949 	bl	80022c0 <set_Timer4>
			break;
 800102e:	e064      	b.n	80010fa <traffic_7Segment_led1+0x306>
		case AUTO_YELLOW:
			if(timer4_flag==1 && led1 ==0){
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <traffic_7Segment_led1+0x280>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d12b      	bne.n	8001090 <traffic_7Segment_led1+0x29c>
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <traffic_7Segment_led1+0x288>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d127      	bne.n	8001090 <traffic_7Segment_led1+0x29c>
				set_7Segment_2(led1, red_counter_1/10);
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <traffic_7Segment_led1+0x288>)
 8001042:	681c      	ldr	r4, [r3, #0]
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <traffic_7Segment_led1+0x298>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	490e      	ldr	r1, [pc, #56]	; (8001084 <traffic_7Segment_led1+0x290>)
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa40 	bl	80004d0 <__aeabi_fdiv>
 8001050:	4603      	mov	r3, r0
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fb4e 	bl	80006f4 <__aeabi_f2iz>
 8001058:	4603      	mov	r3, r0
 800105a:	4619      	mov	r1, r3
 800105c:	4620      	mov	r0, r4
 800105e:	f000 fad3 	bl	8001608 <set_7Segment_2>
				led1 = 1;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <traffic_7Segment_led1+0x288>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
				set_Timer4(50);
 8001068:	2032      	movs	r0, #50	; 0x32
 800106a:	f001 f929 	bl	80022c0 <set_Timer4>
				set_7Segment_2(led1, (int)red_counter_1%10);
				red_counter_1--;
				led1 = 0;
				set_Timer4(50);
			}
			break;
 800106e:	e046      	b.n	80010fe <traffic_7Segment_led1+0x30a>
 8001070:	20000068 	.word	0x20000068
 8001074:	200000a8 	.word	0x200000a8
 8001078:	20000088 	.word	0x20000088
 800107c:	20000074 	.word	0x20000074
 8001080:	2000008c 	.word	0x2000008c
 8001084:	41200000 	.word	0x41200000
 8001088:	66666667 	.word	0x66666667
 800108c:	20000084 	.word	0x20000084
			else if(timer4_flag==1 && led1 ==1){
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <traffic_7Segment_led1+0x310>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d132      	bne.n	80010fe <traffic_7Segment_led1+0x30a>
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <traffic_7Segment_led1+0x314>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d12e      	bne.n	80010fe <traffic_7Segment_led1+0x30a>
				set_7Segment_2(led1, (int)red_counter_1%10);
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <traffic_7Segment_led1+0x314>)
 80010a2:	681c      	ldr	r4, [r3, #0]
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <traffic_7Segment_led1+0x318>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fb23 	bl	80006f4 <__aeabi_f2iz>
 80010ae:	4601      	mov	r1, r0
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <traffic_7Segment_led1+0x31c>)
 80010b2:	fb83 2301 	smull	r2, r3, r3, r1
 80010b6:	109a      	asrs	r2, r3, #2
 80010b8:	17cb      	asrs	r3, r1, #31
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	1aca      	subs	r2, r1, r3
 80010c6:	4611      	mov	r1, r2
 80010c8:	4620      	mov	r0, r4
 80010ca:	f000 fa9d 	bl	8001608 <set_7Segment_2>
				red_counter_1--;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <traffic_7Segment_led1+0x318>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f83c 	bl	8000154 <__aeabi_fsub>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <traffic_7Segment_led1+0x318>)
 80010e2:	601a      	str	r2, [r3, #0]
				led1 = 0;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <traffic_7Segment_led1+0x314>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
				set_Timer4(50);
 80010ea:	2032      	movs	r0, #50	; 0x32
 80010ec:	f001 f8e8 	bl	80022c0 <set_Timer4>
			break;
 80010f0:	e005      	b.n	80010fe <traffic_7Segment_led1+0x30a>
		default:
			break;
 80010f2:	bf00      	nop
 80010f4:	e004      	b.n	8001100 <traffic_7Segment_led1+0x30c>
			break;
 80010f6:	bf00      	nop
 80010f8:	e002      	b.n	8001100 <traffic_7Segment_led1+0x30c>
			break;
 80010fa:	bf00      	nop
 80010fc:	e000      	b.n	8001100 <traffic_7Segment_led1+0x30c>
			break;
 80010fe:	bf00      	nop
	}
}
 8001100:	bf00      	nop
 8001102:	bd98      	pop	{r3, r4, r7, pc}
 8001104:	200000a8 	.word	0x200000a8
 8001108:	20000074 	.word	0x20000074
 800110c:	20000084 	.word	0x20000084
 8001110:	66666667 	.word	0x66666667

08001114 <fsm_manual_run>:
 */

#include"fsm_manual.h"
#include"fsm_automatic.h"

void fsm_manual_run(){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	switch(status){
 8001118:	4b98      	ldr	r3, [pc, #608]	; (800137c <fsm_manual_run+0x268>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3b0d      	subs	r3, #13
 800111e:	2b03      	cmp	r3, #3
 8001120:	f200 8121 	bhi.w	8001366 <fsm_manual_run+0x252>
 8001124:	a201      	add	r2, pc, #4	; (adr r2, 800112c <fsm_manual_run+0x18>)
 8001126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112a:	bf00      	nop
 800112c:	0800113d 	.word	0x0800113d
 8001130:	0800119b 	.word	0x0800119b
 8001134:	08001237 	.word	0x08001237
 8001138:	080012cf 	.word	0x080012cf
		case MAN_INIT:
			clear();
 800113c:	f000 ff40 	bl	8001fc0 <clear>
			clear_follow();
 8001140:	f000 ff54 	bl	8001fec <clear_follow>
			set_7segled_mode(1);
 8001144:	2001      	movs	r0, #1
 8001146:	f000 ff67 	bl	8002018 <set_7segled_mode>
			if(isButton1Pressed()==1){
 800114a:	f7ff fb23 	bl	8000794 <isButton1Pressed>
 800114e:	4603      	mov	r3, r0
 8001150:	2b01      	cmp	r3, #1
 8001152:	d109      	bne.n	8001168 <fsm_manual_run+0x54>
				MAN_duration =0;
 8001154:	4b8a      	ldr	r3, [pc, #552]	; (8001380 <fsm_manual_run+0x26c>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
				status = MAN_RED;
 800115a:	4b88      	ldr	r3, [pc, #544]	; (800137c <fsm_manual_run+0x268>)
 800115c:	220e      	movs	r2, #14
 800115e:	601a      	str	r2, [r3, #0]
				set_Timer1(500);
 8001160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001164:	f001 f870 	bl	8002248 <set_Timer1>
			}
			if(timer1_flag == 1){
 8001168:	4b86      	ldr	r3, [pc, #536]	; (8001384 <fsm_manual_run+0x270>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	f040 80fc 	bne.w	800136a <fsm_manual_run+0x256>
				status = AUTO_RED;
 8001172:	4b82      	ldr	r3, [pc, #520]	; (800137c <fsm_manual_run+0x268>)
 8001174:	2202      	movs	r2, #2
 8001176:	601a      	str	r2, [r3, #0]
				reset_counter();				//for counting down time
 8001178:	f7ff fcd6 	bl	8000b28 <reset_counter>
				set_Timer1(red_duration*100);
 800117c:	4b82      	ldr	r3, [pc, #520]	; (8001388 <fsm_manual_run+0x274>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4982      	ldr	r1, [pc, #520]	; (800138c <fsm_manual_run+0x278>)
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f8f0 	bl	8000368 <__aeabi_fmul>
 8001188:	4603      	mov	r3, r0
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fab2 	bl	80006f4 <__aeabi_f2iz>
 8001190:	4603      	mov	r3, r0
 8001192:	4618      	mov	r0, r3
 8001194:	f001 f858 	bl	8002248 <set_Timer1>
			}
			break;
 8001198:	e0e7      	b.n	800136a <fsm_manual_run+0x256>
		case MAN_RED:
			set_red();
 800119a:	f000 fddd 	bl	8001d58 <set_red>
			set_red_follow();
 800119e:	f000 fe1d 	bl	8001ddc <set_red_follow>
			set_7segled_mode(2);
 80011a2:	2002      	movs	r0, #2
 80011a4:	f000 ff38 	bl	8002018 <set_7segled_mode>
			set_7segled_duration(MAN_duration);
 80011a8:	4b75      	ldr	r3, [pc, #468]	; (8001380 <fsm_manual_run+0x26c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 f803 	bl	80021b8 <set_7segled_duration>
			if(timer1_flag == 1){
 80011b2:	4b74      	ldr	r3, [pc, #464]	; (8001384 <fsm_manual_run+0x270>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d112      	bne.n	80011e0 <fsm_manual_run+0xcc>
				status = AUTO_RED;
 80011ba:	4b70      	ldr	r3, [pc, #448]	; (800137c <fsm_manual_run+0x268>)
 80011bc:	2202      	movs	r2, #2
 80011be:	601a      	str	r2, [r3, #0]
				reset_counter();				//for counting down time
 80011c0:	f7ff fcb2 	bl	8000b28 <reset_counter>
				set_Timer1(red_duration*100);
 80011c4:	4b70      	ldr	r3, [pc, #448]	; (8001388 <fsm_manual_run+0x274>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4970      	ldr	r1, [pc, #448]	; (800138c <fsm_manual_run+0x278>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f8cc 	bl	8000368 <__aeabi_fmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fa8e 	bl	80006f4 <__aeabi_f2iz>
 80011d8:	4603      	mov	r3, r0
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f834 	bl	8002248 <set_Timer1>
			}
			if(isButton1Pressed()==1){
 80011e0:	f7ff fad8 	bl	8000794 <isButton1Pressed>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d109      	bne.n	80011fe <fsm_manual_run+0xea>
				MAN_duration =0;
 80011ea:	4b65      	ldr	r3, [pc, #404]	; (8001380 <fsm_manual_run+0x26c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
				status = MAN_GREEN;
 80011f0:	4b62      	ldr	r3, [pc, #392]	; (800137c <fsm_manual_run+0x268>)
 80011f2:	220f      	movs	r2, #15
 80011f4:	601a      	str	r2, [r3, #0]
				set_Timer1(500);
 80011f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011fa:	f001 f825 	bl	8002248 <set_Timer1>
			}
			// when press button2 update red duaration
			if(isButton2Pressed()==1){
 80011fe:	f7ff fab7 	bl	8000770 <isButton2Pressed>
 8001202:	4603      	mov	r3, r0
 8001204:	2b01      	cmp	r3, #1
 8001206:	f040 80b2 	bne.w	800136e <fsm_manual_run+0x25a>
				set_autoAjust_red(MAN_duration);
 800120a:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <fsm_manual_run+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fe26 	bl	8001e60 <set_autoAjust_red>
				//red_duration = MAN_duration;
				set_Timer1(200);
 8001214:	20c8      	movs	r0, #200	; 0xc8
 8001216:	f001 f817 	bl	8002248 <set_Timer1>
				if(timer1_flag==1){
 800121a:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <fsm_manual_run+0x270>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	f040 80a5 	bne.w	800136e <fsm_manual_run+0x25a>
					status = AUTO_RED;
 8001224:	4b55      	ldr	r3, [pc, #340]	; (800137c <fsm_manual_run+0x268>)
 8001226:	2202      	movs	r2, #2
 8001228:	601a      	str	r2, [r3, #0]
					reset_counter();				//for counting down time
 800122a:	f7ff fc7d 	bl	8000b28 <reset_counter>
					MAN_duration=0;
 800122e:	4b54      	ldr	r3, [pc, #336]	; (8001380 <fsm_manual_run+0x26c>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
				}

			}

			break;
 8001234:	e09b      	b.n	800136e <fsm_manual_run+0x25a>
	////////////////////////////////////////
		case MAN_GREEN:
			set_green();
 8001236:	f000 fda5 	bl	8001d84 <set_green>
			set_green_follow();
 800123a:	f000 fde5 	bl	8001e08 <set_green_follow>
			set_7segled_mode(3);
 800123e:	2003      	movs	r0, #3
 8001240:	f000 feea 	bl	8002018 <set_7segled_mode>
			set_7segled_duration(MAN_duration);
 8001244:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <fsm_manual_run+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f000 ffb5 	bl	80021b8 <set_7segled_duration>
			if(timer1_flag==1){
 800124e:	4b4d      	ldr	r3, [pc, #308]	; (8001384 <fsm_manual_run+0x270>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d112      	bne.n	800127c <fsm_manual_run+0x168>
				status = AUTO_RED;
 8001256:	4b49      	ldr	r3, [pc, #292]	; (800137c <fsm_manual_run+0x268>)
 8001258:	2202      	movs	r2, #2
 800125a:	601a      	str	r2, [r3, #0]
				reset_counter();				//for counting down time
 800125c:	f7ff fc64 	bl	8000b28 <reset_counter>
				set_Timer1(green_duration*100);
 8001260:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <fsm_manual_run+0x27c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4949      	ldr	r1, [pc, #292]	; (800138c <fsm_manual_run+0x278>)
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f87e 	bl	8000368 <__aeabi_fmul>
 800126c:	4603      	mov	r3, r0
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fa40 	bl	80006f4 <__aeabi_f2iz>
 8001274:	4603      	mov	r3, r0
 8001276:	4618      	mov	r0, r3
 8001278:	f000 ffe6 	bl	8002248 <set_Timer1>
			}
			if(isButton1Pressed()==1){
 800127c:	f7ff fa8a 	bl	8000794 <isButton1Pressed>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	d109      	bne.n	800129a <fsm_manual_run+0x186>
				MAN_duration =0;
 8001286:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <fsm_manual_run+0x26c>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
				status = MAN_YELLOW;
 800128c:	4b3b      	ldr	r3, [pc, #236]	; (800137c <fsm_manual_run+0x268>)
 800128e:	2210      	movs	r2, #16
 8001290:	601a      	str	r2, [r3, #0]
				set_Timer1(500);
 8001292:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001296:	f000 ffd7 	bl	8002248 <set_Timer1>
			}
			// when press button2 update green duration
			if(isButton2Pressed()==1){
 800129a:	f7ff fa69 	bl	8000770 <isButton2Pressed>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d166      	bne.n	8001372 <fsm_manual_run+0x25e>
				set_autoAjust_green(MAN_duration);
 80012a4:	4b36      	ldr	r3, [pc, #216]	; (8001380 <fsm_manual_run+0x26c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fe4f 	bl	8001f4c <set_autoAjust_green>
				//green_duration = MAN_duration;
				set_Timer1(200);
 80012ae:	20c8      	movs	r0, #200	; 0xc8
 80012b0:	f000 ffca 	bl	8002248 <set_Timer1>
				if(timer1_flag==1){
 80012b4:	4b33      	ldr	r3, [pc, #204]	; (8001384 <fsm_manual_run+0x270>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d15a      	bne.n	8001372 <fsm_manual_run+0x25e>
					status = AUTO_RED;				//Back to red and do auto
 80012bc:	4b2f      	ldr	r3, [pc, #188]	; (800137c <fsm_manual_run+0x268>)
 80012be:	2202      	movs	r2, #2
 80012c0:	601a      	str	r2, [r3, #0]
					reset_counter();				//for counting down time
 80012c2:	f7ff fc31 	bl	8000b28 <reset_counter>
					MAN_duration=0;
 80012c6:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <fsm_manual_run+0x26c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
				}
			}


			break;
 80012cc:	e051      	b.n	8001372 <fsm_manual_run+0x25e>
	///////////////////////////////////////////////////
		case MAN_YELLOW:
			set_yellow();
 80012ce:	f000 fd6f 	bl	8001db0 <set_yellow>
			set_yellow_follow();
 80012d2:	f000 fdaf 	bl	8001e34 <set_yellow_follow>
			set_7segled_mode(4);
 80012d6:	2004      	movs	r0, #4
 80012d8:	f000 fe9e 	bl	8002018 <set_7segled_mode>
			set_7segled_duration(MAN_duration);
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <fsm_manual_run+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 ff69 	bl	80021b8 <set_7segled_duration>
			if(timer1_flag==1){
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <fsm_manual_run+0x270>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d112      	bne.n	8001314 <fsm_manual_run+0x200>
				status = AUTO_RED;
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <fsm_manual_run+0x268>)
 80012f0:	2202      	movs	r2, #2
 80012f2:	601a      	str	r2, [r3, #0]
				reset_counter();				//for counting down time
 80012f4:	f7ff fc18 	bl	8000b28 <reset_counter>
				set_Timer1(yellow_duration*100);
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <fsm_manual_run+0x280>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4923      	ldr	r1, [pc, #140]	; (800138c <fsm_manual_run+0x278>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f832 	bl	8000368 <__aeabi_fmul>
 8001304:	4603      	mov	r3, r0
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f9f4 	bl	80006f4 <__aeabi_f2iz>
 800130c:	4603      	mov	r3, r0
 800130e:	4618      	mov	r0, r3
 8001310:	f000 ff9a 	bl	8002248 <set_Timer1>
			}
			if(isButton1Pressed()==1){
 8001314:	f7ff fa3e 	bl	8000794 <isButton1Pressed>
 8001318:	4603      	mov	r3, r0
 800131a:	2b01      	cmp	r3, #1
 800131c:	d109      	bne.n	8001332 <fsm_manual_run+0x21e>
				MAN_duration =0;
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <fsm_manual_run+0x26c>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
				status = MAN_INIT;
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <fsm_manual_run+0x268>)
 8001326:	220d      	movs	r2, #13
 8001328:	601a      	str	r2, [r3, #0]
				set_Timer1(500);
 800132a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800132e:	f000 ff8b 	bl	8002248 <set_Timer1>
			}
			if(isButton2Pressed()==1){
 8001332:	f7ff fa1d 	bl	8000770 <isButton2Pressed>
 8001336:	4603      	mov	r3, r0
 8001338:	2b01      	cmp	r3, #1
 800133a:	d11c      	bne.n	8001376 <fsm_manual_run+0x262>
				set_autoAjust_yellow(MAN_duration);
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <fsm_manual_run+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fdc7 	bl	8001ed4 <set_autoAjust_yellow>
				//yellow_duration = MAN_duration;
				set_Timer1(200);
 8001346:	20c8      	movs	r0, #200	; 0xc8
 8001348:	f000 ff7e 	bl	8002248 <set_Timer1>
				if(timer1_flag==1){
 800134c:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <fsm_manual_run+0x270>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d110      	bne.n	8001376 <fsm_manual_run+0x262>
					status = AUTO_RED;				//Back to red and do auto
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <fsm_manual_run+0x268>)
 8001356:	2202      	movs	r2, #2
 8001358:	601a      	str	r2, [r3, #0]
					reset_counter();				//for counting down time
 800135a:	f7ff fbe5 	bl	8000b28 <reset_counter>
					MAN_duration=0;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <fsm_manual_run+0x26c>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
				}
			}

			break;
 8001364:	e007      	b.n	8001376 <fsm_manual_run+0x262>
		default:
			break;
 8001366:	bf00      	nop
 8001368:	e006      	b.n	8001378 <fsm_manual_run+0x264>
			break;
 800136a:	bf00      	nop
 800136c:	e004      	b.n	8001378 <fsm_manual_run+0x264>
			break;
 800136e:	bf00      	nop
 8001370:	e002      	b.n	8001378 <fsm_manual_run+0x264>
			break;
 8001372:	bf00      	nop
 8001374:	e000      	b.n	8001378 <fsm_manual_run+0x264>
			break;
 8001376:	bf00      	nop

	}
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000068 	.word	0x20000068
 8001380:	2000006c 	.word	0x2000006c
 8001384:	20000090 	.word	0x20000090
 8001388:	20000024 	.word	0x20000024
 800138c:	42c80000 	.word	0x42c80000
 8001390:	20000028 	.word	0x20000028
 8001394:	2000002c 	.word	0x2000002c

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139c:	f001 f8fe 	bl	800259c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a0:	f000 f818 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a4:	f000 f89e 	bl	80014e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013a8:	f000 f850 	bl	800144c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <main+0x34>)
 80013ae:	f002 f83b 	bl	8003428 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
  status = INIT;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <main+0x38>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  traffic_7Segment_led();
 80013b8:	f7ff fbf2 	bl	8000ba0 <traffic_7Segment_led>
	  traffic_7Segment_led1();
 80013bc:	f7ff fd1a 	bl	8000df4 <traffic_7Segment_led1>
	  fsm_automatic_run();
 80013c0:	f7ff fabc 	bl	800093c <fsm_automatic_run>
	  fsm_manual_run();
 80013c4:	f7ff fea6 	bl	8001114 <fsm_manual_run>
  {
 80013c8:	e7f6      	b.n	80013b8 <main+0x20>
 80013ca:	bf00      	nop
 80013cc:	200000b8 	.word	0x200000b8
 80013d0:	20000068 	.word	0x20000068

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b090      	sub	sp, #64	; 0x40
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	2228      	movs	r2, #40	; 0x28
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 fbdc 	bl	8003ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fa:	2301      	movs	r3, #1
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fe:	2310      	movs	r3, #16
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001402:	2300      	movs	r3, #0
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001406:	f107 0318 	add.w	r3, r7, #24
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fbe0 	bl	8002bd0 <HAL_RCC_OscConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001416:	f000 f8f1 	bl	80015fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141a:	230f      	movs	r3, #15
 800141c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fe4c 	bl	80030d0 <HAL_RCC_ClockConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800143e:	f000 f8dd 	bl	80015fc <Error_Handler>
  }
}
 8001442:	bf00      	nop
 8001444:	3740      	adds	r7, #64	; 0x40
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	463b      	mov	r3, r7
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <MX_TIM2_Init+0x94>)
 800146a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800146e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <MX_TIM2_Init+0x94>)
 8001472:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001476:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <MX_TIM2_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <MX_TIM2_Init+0x94>)
 8001480:	2209      	movs	r2, #9
 8001482:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <MX_TIM2_Init+0x94>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_TIM2_Init+0x94>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001490:	4813      	ldr	r0, [pc, #76]	; (80014e0 <MX_TIM2_Init+0x94>)
 8001492:	f001 ff79 	bl	8003388 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800149c:	f000 f8ae 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <MX_TIM2_Init+0x94>)
 80014ae:	f002 f90f 	bl	80036d0 <HAL_TIM_ConfigClockSource>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014b8:	f000 f8a0 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_TIM2_Init+0x94>)
 80014ca:	f002 fadb 	bl	8003a84 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014d4:	f000 f892 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200000b8 	.word	0x200000b8

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 0310 	add.w	r3, r7, #16
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f8:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <MX_GPIO_Init+0xec>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a34      	ldr	r2, [pc, #208]	; (80015d0 <MX_GPIO_Init+0xec>)
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <MX_GPIO_Init+0xec>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <MX_GPIO_Init+0xec>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a2e      	ldr	r2, [pc, #184]	; (80015d0 <MX_GPIO_Init+0xec>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <MX_GPIO_Init+0xec>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_GPIO_Init+0xec>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <MX_GPIO_Init+0xec>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <MX_GPIO_Init+0xec>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_RED_Pin|LED_YELLOW_Pin
 8001540:	2200      	movs	r2, #0
 8001542:	f641 71f8 	movw	r1, #8184	; 0x1ff8
 8001546:	4823      	ldr	r0, [pc, #140]	; (80015d4 <MX_GPIO_Init+0xf0>)
 8001548:	f001 fb29 	bl	8002b9e <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|LED_GREEN1_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|b2_Pin
 800154c:	2200      	movs	r2, #0
 800154e:	f64f 617f 	movw	r1, #65151	; 0xfe7f
 8001552:	4821      	ldr	r0, [pc, #132]	; (80015d8 <MX_GPIO_Init+0xf4>)
 8001554:	f001 fb23 	bl	8002b9e <HAL_GPIO_WritePin>
                          |c2_Pin|d2_Pin|e2_Pin|f2_Pin
                          |g2_Pin|d1_Pin|e1_Pin|f1_Pin
                          |g1_Pin|a2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4619      	mov	r1, r3
 800156c:	481b      	ldr	r0, [pc, #108]	; (80015dc <MX_GPIO_Init+0xf8>)
 800156e:	f001 f985 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_RED_Pin LED_YELLOW_Pin
                           LED_GREEN_Pin LED_GREEN1_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_RED_Pin|LED_YELLOW_Pin
 8001572:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8001576:	613b      	str	r3, [r7, #16]
                          |LED_GREEN_Pin|LED_GREEN1_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2302      	movs	r3, #2
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	4812      	ldr	r0, [pc, #72]	; (80015d4 <MX_GPIO_Init+0xf0>)
 800158c:	f001 f976 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin b2_Pin
                           c2_Pin d2_Pin e2_Pin f2_Pin
                           g2_Pin d1_Pin e1_Pin f1_Pin
                           g1_Pin a2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|b2_Pin
 8001590:	f64f 637f 	movw	r3, #65151	; 0xfe7f
 8001594:	613b      	str	r3, [r7, #16]
                          |c2_Pin|d2_Pin|e2_Pin|f2_Pin
                          |g2_Pin|d1_Pin|e1_Pin|f1_Pin
                          |g1_Pin|a2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2302      	movs	r3, #2
 80015a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	4619      	mov	r1, r3
 80015a8:	480b      	ldr	r0, [pc, #44]	; (80015d8 <MX_GPIO_Init+0xf4>)
 80015aa:	f001 f967 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 80015ae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80015b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4619      	mov	r1, r3
 80015c2:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_GPIO_Init+0xf0>)
 80015c4:	f001 f95a 	bl	800287c <HAL_GPIO_Init>

}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010800 	.word	0x40010800
 80015d8:	40010c00 	.word	0x40010c00
 80015dc:	40011000 	.word	0x40011000

080015e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	timerRun();
 80015e8:	f000 fea6 	bl	8002338 <timerRun>
	Button1Press();
 80015ec:	f7ff f8e4 	bl	80007b8 <Button1Press>
	set_duration_main();
 80015f0:	f7ff f936 	bl	8000860 <set_duration_main>


}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001604:	e7fe      	b.n	8001604 <Error_Handler+0x8>
	...

08001608 <set_7Segment_2>:
 */

#include "set_traffic_led.h"

void set_7Segment_2(int led,int duration)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	if(led ==0){
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10b      	bne.n	8001630 <set_7Segment_2+0x28>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800161e:	48c5      	ldr	r0, [pc, #788]	; (8001934 <set_7Segment_2+0x32c>)
 8001620:	f001 fabd 	bl	8002b9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162a:	48c2      	ldr	r0, [pc, #776]	; (8001934 <set_7Segment_2+0x32c>)
 800162c:	f001 fab7 	bl	8002b9e <HAL_GPIO_WritePin>
	}
	if(led ==1){
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d10b      	bne.n	800164e <set_7Segment_2+0x46>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8001636:	2201      	movs	r2, #1
 8001638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800163c:	48bd      	ldr	r0, [pc, #756]	; (8001934 <set_7Segment_2+0x32c>)
 800163e:	f001 faae 	bl	8002b9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001648:	48ba      	ldr	r0, [pc, #744]	; (8001934 <set_7Segment_2+0x32c>)
 800164a:	f001 faa8 	bl	8002b9e <HAL_GPIO_WritePin>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2b09      	cmp	r3, #9
 8001652:	f200 81c9 	bhi.w	80019e8 <set_7Segment_2+0x3e0>
 8001656:	a201      	add	r2, pc, #4	; (adr r2, 800165c <set_7Segment_2+0x54>)
 8001658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165c:	08001685 	.word	0x08001685
 8001660:	080016db 	.word	0x080016db
 8001664:	08001731 	.word	0x08001731
 8001668:	08001787 	.word	0x08001787
 800166c:	080017dd 	.word	0x080017dd
 8001670:	08001833 	.word	0x08001833
 8001674:	08001889 	.word	0x08001889
 8001678:	080018df 	.word	0x080018df
 800167c:	0800193d 	.word	0x0800193d
 8001680:	08001993 	.word	0x08001993
	}
	switch(duration){
		case 0:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800168a:	48ab      	ldr	r0, [pc, #684]	; (8001938 <set_7Segment_2+0x330>)
 800168c:	f001 fa87 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001696:	48a8      	ldr	r0, [pc, #672]	; (8001938 <set_7Segment_2+0x330>)
 8001698:	f001 fa81 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, 0);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a2:	48a5      	ldr	r0, [pc, #660]	; (8001938 <set_7Segment_2+0x330>)
 80016a4:	f001 fa7b 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ae:	48a2      	ldr	r0, [pc, #648]	; (8001938 <set_7Segment_2+0x330>)
 80016b0:	f001 fa75 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ba:	489f      	ldr	r0, [pc, #636]	; (8001938 <set_7Segment_2+0x330>)
 80016bc:	f001 fa6f 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c6:	489c      	ldr	r0, [pc, #624]	; (8001938 <set_7Segment_2+0x330>)
 80016c8:	f001 fa69 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, 1);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d2:	4899      	ldr	r0, [pc, #612]	; (8001938 <set_7Segment_2+0x330>)
 80016d4:	f001 fa63 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 80016d8:	e187      	b.n	80019ea <set_7Segment_2+0x3e2>
		case 1:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 1);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e0:	4895      	ldr	r0, [pc, #596]	; (8001938 <set_7Segment_2+0x330>)
 80016e2:	f001 fa5c 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ec:	4892      	ldr	r0, [pc, #584]	; (8001938 <set_7Segment_2+0x330>)
 80016ee:	f001 fa56 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016f8:	488f      	ldr	r0, [pc, #572]	; (8001938 <set_7Segment_2+0x330>)
 80016fa:	f001 fa50 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, 1);
 80016fe:	2201      	movs	r2, #1
 8001700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001704:	488c      	ldr	r0, [pc, #560]	; (8001938 <set_7Segment_2+0x330>)
 8001706:	f001 fa4a 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, 1);
 800170a:	2201      	movs	r2, #1
 800170c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001710:	4889      	ldr	r0, [pc, #548]	; (8001938 <set_7Segment_2+0x330>)
 8001712:	f001 fa44 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, 1);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800171c:	4886      	ldr	r0, [pc, #536]	; (8001938 <set_7Segment_2+0x330>)
 800171e:	f001 fa3e 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, 1);
 8001722:	2201      	movs	r2, #1
 8001724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001728:	4883      	ldr	r0, [pc, #524]	; (8001938 <set_7Segment_2+0x330>)
 800172a:	f001 fa38 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 800172e:	e15c      	b.n	80019ea <set_7Segment_2+0x3e2>
		case 2:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001736:	4880      	ldr	r0, [pc, #512]	; (8001938 <set_7Segment_2+0x330>)
 8001738:	f001 fa31 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001742:	487d      	ldr	r0, [pc, #500]	; (8001938 <set_7Segment_2+0x330>)
 8001744:	f001 fa2b 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800174e:	487a      	ldr	r0, [pc, #488]	; (8001938 <set_7Segment_2+0x330>)
 8001750:	f001 fa25 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800175a:	4877      	ldr	r0, [pc, #476]	; (8001938 <set_7Segment_2+0x330>)
 800175c:	f001 fa1f 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001766:	4874      	ldr	r0, [pc, #464]	; (8001938 <set_7Segment_2+0x330>)
 8001768:	f001 fa19 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, 1);
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001772:	4871      	ldr	r0, [pc, #452]	; (8001938 <set_7Segment_2+0x330>)
 8001774:	f001 fa13 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800177e:	486e      	ldr	r0, [pc, #440]	; (8001938 <set_7Segment_2+0x330>)
 8001780:	f001 fa0d 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001784:	e131      	b.n	80019ea <set_7Segment_2+0x3e2>
		case 3:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800178c:	486a      	ldr	r0, [pc, #424]	; (8001938 <set_7Segment_2+0x330>)
 800178e:	f001 fa06 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001798:	4867      	ldr	r0, [pc, #412]	; (8001938 <set_7Segment_2+0x330>)
 800179a:	f001 fa00 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a4:	4864      	ldr	r0, [pc, #400]	; (8001938 <set_7Segment_2+0x330>)
 80017a6:	f001 f9fa 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b0:	4861      	ldr	r0, [pc, #388]	; (8001938 <set_7Segment_2+0x330>)
 80017b2:	f001 f9f4 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, 1);
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017bc:	485e      	ldr	r0, [pc, #376]	; (8001938 <set_7Segment_2+0x330>)
 80017be:	f001 f9ee 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, 1);
 80017c2:	2201      	movs	r2, #1
 80017c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c8:	485b      	ldr	r0, [pc, #364]	; (8001938 <set_7Segment_2+0x330>)
 80017ca:	f001 f9e8 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d4:	4858      	ldr	r0, [pc, #352]	; (8001938 <set_7Segment_2+0x330>)
 80017d6:	f001 f9e2 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 80017da:	e106      	b.n	80019ea <set_7Segment_2+0x3e2>
		case 4:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 1);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e2:	4855      	ldr	r0, [pc, #340]	; (8001938 <set_7Segment_2+0x330>)
 80017e4:	f001 f9db 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ee:	4852      	ldr	r0, [pc, #328]	; (8001938 <set_7Segment_2+0x330>)
 80017f0:	f001 f9d5 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017fa:	484f      	ldr	r0, [pc, #316]	; (8001938 <set_7Segment_2+0x330>)
 80017fc:	f001 f9cf 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, 1);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001806:	484c      	ldr	r0, [pc, #304]	; (8001938 <set_7Segment_2+0x330>)
 8001808:	f001 f9c9 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, 1);
 800180c:	2201      	movs	r2, #1
 800180e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001812:	4849      	ldr	r0, [pc, #292]	; (8001938 <set_7Segment_2+0x330>)
 8001814:	f001 f9c3 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800181e:	4846      	ldr	r0, [pc, #280]	; (8001938 <set_7Segment_2+0x330>)
 8001820:	f001 f9bd 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800182a:	4843      	ldr	r0, [pc, #268]	; (8001938 <set_7Segment_2+0x330>)
 800182c:	f001 f9b7 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001830:	e0db      	b.n	80019ea <set_7Segment_2+0x3e2>
		case 5:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001838:	483f      	ldr	r0, [pc, #252]	; (8001938 <set_7Segment_2+0x330>)
 800183a:	f001 f9b0 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, 1);
 800183e:	2201      	movs	r2, #1
 8001840:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001844:	483c      	ldr	r0, [pc, #240]	; (8001938 <set_7Segment_2+0x330>)
 8001846:	f001 f9aa 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001850:	4839      	ldr	r0, [pc, #228]	; (8001938 <set_7Segment_2+0x330>)
 8001852:	f001 f9a4 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800185c:	4836      	ldr	r0, [pc, #216]	; (8001938 <set_7Segment_2+0x330>)
 800185e:	f001 f99e 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, 1);
 8001862:	2201      	movs	r2, #1
 8001864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001868:	4833      	ldr	r0, [pc, #204]	; (8001938 <set_7Segment_2+0x330>)
 800186a:	f001 f998 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001874:	4830      	ldr	r0, [pc, #192]	; (8001938 <set_7Segment_2+0x330>)
 8001876:	f001 f992 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001880:	482d      	ldr	r0, [pc, #180]	; (8001938 <set_7Segment_2+0x330>)
 8001882:	f001 f98c 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001886:	e0b0      	b.n	80019ea <set_7Segment_2+0x3e2>
		case 6:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800188e:	482a      	ldr	r0, [pc, #168]	; (8001938 <set_7Segment_2+0x330>)
 8001890:	f001 f985 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, 1);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800189a:	4827      	ldr	r0, [pc, #156]	; (8001938 <set_7Segment_2+0x330>)
 800189c:	f001 f97f 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018a6:	4824      	ldr	r0, [pc, #144]	; (8001938 <set_7Segment_2+0x330>)
 80018a8:	f001 f979 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b2:	4821      	ldr	r0, [pc, #132]	; (8001938 <set_7Segment_2+0x330>)
 80018b4:	f001 f973 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018be:	481e      	ldr	r0, [pc, #120]	; (8001938 <set_7Segment_2+0x330>)
 80018c0:	f001 f96d 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, 0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ca:	481b      	ldr	r0, [pc, #108]	; (8001938 <set_7Segment_2+0x330>)
 80018cc:	f001 f967 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018d6:	4818      	ldr	r0, [pc, #96]	; (8001938 <set_7Segment_2+0x330>)
 80018d8:	f001 f961 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 80018dc:	e085      	b.n	80019ea <set_7Segment_2+0x3e2>
		case 7:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e4:	4814      	ldr	r0, [pc, #80]	; (8001938 <set_7Segment_2+0x330>)
 80018e6:	f001 f95a 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f0:	4811      	ldr	r0, [pc, #68]	; (8001938 <set_7Segment_2+0x330>)
 80018f2:	f001 f954 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018fc:	480e      	ldr	r0, [pc, #56]	; (8001938 <set_7Segment_2+0x330>)
 80018fe:	f001 f94e 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, 1);
 8001902:	2201      	movs	r2, #1
 8001904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <set_7Segment_2+0x330>)
 800190a:	f001 f948 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, 1);
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001914:	4808      	ldr	r0, [pc, #32]	; (8001938 <set_7Segment_2+0x330>)
 8001916:	f001 f942 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, 1);
 800191a:	2201      	movs	r2, #1
 800191c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <set_7Segment_2+0x330>)
 8001922:	f001 f93c 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, 1);
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <set_7Segment_2+0x330>)
 800192e:	f001 f936 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001932:	e05a      	b.n	80019ea <set_7Segment_2+0x3e2>
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00
		case 8:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001942:	482c      	ldr	r0, [pc, #176]	; (80019f4 <set_7Segment_2+0x3ec>)
 8001944:	f001 f92b 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800194e:	4829      	ldr	r0, [pc, #164]	; (80019f4 <set_7Segment_2+0x3ec>)
 8001950:	f001 f925 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800195a:	4826      	ldr	r0, [pc, #152]	; (80019f4 <set_7Segment_2+0x3ec>)
 800195c:	f001 f91f 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001966:	4823      	ldr	r0, [pc, #140]	; (80019f4 <set_7Segment_2+0x3ec>)
 8001968:	f001 f919 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001972:	4820      	ldr	r0, [pc, #128]	; (80019f4 <set_7Segment_2+0x3ec>)
 8001974:	f001 f913 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800197e:	481d      	ldr	r0, [pc, #116]	; (80019f4 <set_7Segment_2+0x3ec>)
 8001980:	f001 f90d 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198a:	481a      	ldr	r0, [pc, #104]	; (80019f4 <set_7Segment_2+0x3ec>)
 800198c:	f001 f907 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001990:	e02b      	b.n	80019ea <set_7Segment_2+0x3e2>
		case 9:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001998:	4816      	ldr	r0, [pc, #88]	; (80019f4 <set_7Segment_2+0x3ec>)
 800199a:	f001 f900 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a4:	4813      	ldr	r0, [pc, #76]	; (80019f4 <set_7Segment_2+0x3ec>)
 80019a6:	f001 f8fa 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019b0:	4810      	ldr	r0, [pc, #64]	; (80019f4 <set_7Segment_2+0x3ec>)
 80019b2:	f001 f8f4 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019bc:	480d      	ldr	r0, [pc, #52]	; (80019f4 <set_7Segment_2+0x3ec>)
 80019be:	f001 f8ee 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, 1);
 80019c2:	2201      	movs	r2, #1
 80019c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c8:	480a      	ldr	r0, [pc, #40]	; (80019f4 <set_7Segment_2+0x3ec>)
 80019ca:	f001 f8e8 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019d4:	4807      	ldr	r0, [pc, #28]	; (80019f4 <set_7Segment_2+0x3ec>)
 80019d6:	f001 f8e2 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <set_7Segment_2+0x3ec>)
 80019e2:	f001 f8dc 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 80019e6:	e000      	b.n	80019ea <set_7Segment_2+0x3e2>
		default:
			break;
 80019e8:	bf00      	nop
	}
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40010c00 	.word	0x40010c00

080019f8 <set_7Segment_1>:
void set_7Segment_1(int led,int duration)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	if(led ==0){
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10b      	bne.n	8001a20 <set_7Segment_1+0x28>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a0e:	48d0      	ldr	r0, [pc, #832]	; (8001d50 <set_7Segment_1+0x358>)
 8001a10:	f001 f8c5 	bl	8002b9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a1a:	48cd      	ldr	r0, [pc, #820]	; (8001d50 <set_7Segment_1+0x358>)
 8001a1c:	f001 f8bf 	bl	8002b9e <HAL_GPIO_WritePin>
	}
	if(led ==1){
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d10b      	bne.n	8001a3e <set_7Segment_1+0x46>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8001a26:	2201      	movs	r2, #1
 8001a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a2c:	48c8      	ldr	r0, [pc, #800]	; (8001d50 <set_7Segment_1+0x358>)
 8001a2e:	f001 f8b6 	bl	8002b9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a38:	48c5      	ldr	r0, [pc, #788]	; (8001d50 <set_7Segment_1+0x358>)
 8001a3a:	f001 f8b0 	bl	8002b9e <HAL_GPIO_WritePin>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2b09      	cmp	r3, #9
 8001a42:	f200 817f 	bhi.w	8001d44 <set_7Segment_1+0x34c>
 8001a46:	a201      	add	r2, pc, #4	; (adr r2, 8001a4c <set_7Segment_1+0x54>)
 8001a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4c:	08001a75 	.word	0x08001a75
 8001a50:	08001abd 	.word	0x08001abd
 8001a54:	08001b05 	.word	0x08001b05
 8001a58:	08001b4d 	.word	0x08001b4d
 8001a5c:	08001b95 	.word	0x08001b95
 8001a60:	08001bdd 	.word	0x08001bdd
 8001a64:	08001c25 	.word	0x08001c25
 8001a68:	08001c6d 	.word	0x08001c6d
 8001a6c:	08001cb5 	.word	0x08001cb5
 8001a70:	08001cfd 	.word	0x08001cfd
	}
	switch(duration){
		case 0:
			HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2101      	movs	r1, #1
 8001a78:	48b6      	ldr	r0, [pc, #728]	; (8001d54 <set_7Segment_1+0x35c>)
 8001a7a:	f001 f890 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2102      	movs	r1, #2
 8001a82:	48b4      	ldr	r0, [pc, #720]	; (8001d54 <set_7Segment_1+0x35c>)
 8001a84:	f001 f88b 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	48b1      	ldr	r0, [pc, #708]	; (8001d54 <set_7Segment_1+0x35c>)
 8001a8e:	f001 f886 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2108      	movs	r1, #8
 8001a96:	48af      	ldr	r0, [pc, #700]	; (8001d54 <set_7Segment_1+0x35c>)
 8001a98:	f001 f881 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	48ac      	ldr	r0, [pc, #688]	; (8001d54 <set_7Segment_1+0x35c>)
 8001aa2:	f001 f87c 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2120      	movs	r1, #32
 8001aaa:	48aa      	ldr	r0, [pc, #680]	; (8001d54 <set_7Segment_1+0x35c>)
 8001aac:	f001 f877 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, 1);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	48a7      	ldr	r0, [pc, #668]	; (8001d54 <set_7Segment_1+0x35c>)
 8001ab6:	f001 f872 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001aba:	e144      	b.n	8001d46 <set_7Segment_1+0x34e>
		case 1:
			HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 1);
 8001abc:	2201      	movs	r2, #1
 8001abe:	2101      	movs	r1, #1
 8001ac0:	48a4      	ldr	r0, [pc, #656]	; (8001d54 <set_7Segment_1+0x35c>)
 8001ac2:	f001 f86c 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2102      	movs	r1, #2
 8001aca:	48a2      	ldr	r0, [pc, #648]	; (8001d54 <set_7Segment_1+0x35c>)
 8001acc:	f001 f867 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	489f      	ldr	r0, [pc, #636]	; (8001d54 <set_7Segment_1+0x35c>)
 8001ad6:	f001 f862 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, 1);
 8001ada:	2201      	movs	r2, #1
 8001adc:	2108      	movs	r1, #8
 8001ade:	489d      	ldr	r0, [pc, #628]	; (8001d54 <set_7Segment_1+0x35c>)
 8001ae0:	f001 f85d 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, 1);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	489a      	ldr	r0, [pc, #616]	; (8001d54 <set_7Segment_1+0x35c>)
 8001aea:	f001 f858 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, 1);
 8001aee:	2201      	movs	r2, #1
 8001af0:	2120      	movs	r1, #32
 8001af2:	4898      	ldr	r0, [pc, #608]	; (8001d54 <set_7Segment_1+0x35c>)
 8001af4:	f001 f853 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, 1);
 8001af8:	2201      	movs	r2, #1
 8001afa:	2140      	movs	r1, #64	; 0x40
 8001afc:	4895      	ldr	r0, [pc, #596]	; (8001d54 <set_7Segment_1+0x35c>)
 8001afe:	f001 f84e 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001b02:	e120      	b.n	8001d46 <set_7Segment_1+0x34e>
		case 2:
			HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2101      	movs	r1, #1
 8001b08:	4892      	ldr	r0, [pc, #584]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b0a:	f001 f848 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2102      	movs	r1, #2
 8001b12:	4890      	ldr	r0, [pc, #576]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b14:	f001 f843 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, 1);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	488d      	ldr	r0, [pc, #564]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b1e:	f001 f83e 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2108      	movs	r1, #8
 8001b26:	488b      	ldr	r0, [pc, #556]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b28:	f001 f839 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2110      	movs	r1, #16
 8001b30:	4888      	ldr	r0, [pc, #544]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b32:	f001 f834 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, 1);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2120      	movs	r1, #32
 8001b3a:	4886      	ldr	r0, [pc, #536]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b3c:	f001 f82f 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2140      	movs	r1, #64	; 0x40
 8001b44:	4883      	ldr	r0, [pc, #524]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b46:	f001 f82a 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001b4a:	e0fc      	b.n	8001d46 <set_7Segment_1+0x34e>
		case 3:
			HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2101      	movs	r1, #1
 8001b50:	4880      	ldr	r0, [pc, #512]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b52:	f001 f824 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2102      	movs	r1, #2
 8001b5a:	487e      	ldr	r0, [pc, #504]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b5c:	f001 f81f 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2104      	movs	r1, #4
 8001b64:	487b      	ldr	r0, [pc, #492]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b66:	f001 f81a 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2108      	movs	r1, #8
 8001b6e:	4879      	ldr	r0, [pc, #484]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b70:	f001 f815 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, 1);
 8001b74:	2201      	movs	r2, #1
 8001b76:	2110      	movs	r1, #16
 8001b78:	4876      	ldr	r0, [pc, #472]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b7a:	f001 f810 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, 1);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2120      	movs	r1, #32
 8001b82:	4874      	ldr	r0, [pc, #464]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b84:	f001 f80b 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2140      	movs	r1, #64	; 0x40
 8001b8c:	4871      	ldr	r0, [pc, #452]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b8e:	f001 f806 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001b92:	e0d8      	b.n	8001d46 <set_7Segment_1+0x34e>
		case 4:
			HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 1);
 8001b94:	2201      	movs	r2, #1
 8001b96:	2101      	movs	r1, #1
 8001b98:	486e      	ldr	r0, [pc, #440]	; (8001d54 <set_7Segment_1+0x35c>)
 8001b9a:	f001 f800 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	486c      	ldr	r0, [pc, #432]	; (8001d54 <set_7Segment_1+0x35c>)
 8001ba4:	f000 fffb 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2104      	movs	r1, #4
 8001bac:	4869      	ldr	r0, [pc, #420]	; (8001d54 <set_7Segment_1+0x35c>)
 8001bae:	f000 fff6 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, 1);
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	2108      	movs	r1, #8
 8001bb6:	4867      	ldr	r0, [pc, #412]	; (8001d54 <set_7Segment_1+0x35c>)
 8001bb8:	f000 fff1 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, 1);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2110      	movs	r1, #16
 8001bc0:	4864      	ldr	r0, [pc, #400]	; (8001d54 <set_7Segment_1+0x35c>)
 8001bc2:	f000 ffec 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2120      	movs	r1, #32
 8001bca:	4862      	ldr	r0, [pc, #392]	; (8001d54 <set_7Segment_1+0x35c>)
 8001bcc:	f000 ffe7 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2140      	movs	r1, #64	; 0x40
 8001bd4:	485f      	ldr	r0, [pc, #380]	; (8001d54 <set_7Segment_1+0x35c>)
 8001bd6:	f000 ffe2 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001bda:	e0b4      	b.n	8001d46 <set_7Segment_1+0x34e>
		case 5:
			HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2101      	movs	r1, #1
 8001be0:	485c      	ldr	r0, [pc, #368]	; (8001d54 <set_7Segment_1+0x35c>)
 8001be2:	f000 ffdc 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, 1);
 8001be6:	2201      	movs	r2, #1
 8001be8:	2102      	movs	r1, #2
 8001bea:	485a      	ldr	r0, [pc, #360]	; (8001d54 <set_7Segment_1+0x35c>)
 8001bec:	f000 ffd7 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	4857      	ldr	r0, [pc, #348]	; (8001d54 <set_7Segment_1+0x35c>)
 8001bf6:	f000 ffd2 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2108      	movs	r1, #8
 8001bfe:	4855      	ldr	r0, [pc, #340]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c00:	f000 ffcd 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, 1);
 8001c04:	2201      	movs	r2, #1
 8001c06:	2110      	movs	r1, #16
 8001c08:	4852      	ldr	r0, [pc, #328]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c0a:	f000 ffc8 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2120      	movs	r1, #32
 8001c12:	4850      	ldr	r0, [pc, #320]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c14:	f000 ffc3 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2140      	movs	r1, #64	; 0x40
 8001c1c:	484d      	ldr	r0, [pc, #308]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c1e:	f000 ffbe 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001c22:	e090      	b.n	8001d46 <set_7Segment_1+0x34e>
		case 6:
			HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2101      	movs	r1, #1
 8001c28:	484a      	ldr	r0, [pc, #296]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c2a:	f000 ffb8 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, 1);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2102      	movs	r1, #2
 8001c32:	4848      	ldr	r0, [pc, #288]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c34:	f000 ffb3 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	4845      	ldr	r0, [pc, #276]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c3e:	f000 ffae 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2108      	movs	r1, #8
 8001c46:	4843      	ldr	r0, [pc, #268]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c48:	f000 ffa9 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2110      	movs	r1, #16
 8001c50:	4840      	ldr	r0, [pc, #256]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c52:	f000 ffa4 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2120      	movs	r1, #32
 8001c5a:	483e      	ldr	r0, [pc, #248]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c5c:	f000 ff9f 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2140      	movs	r1, #64	; 0x40
 8001c64:	483b      	ldr	r0, [pc, #236]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c66:	f000 ff9a 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001c6a:	e06c      	b.n	8001d46 <set_7Segment_1+0x34e>
		case 7:
			HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4838      	ldr	r0, [pc, #224]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c72:	f000 ff94 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2102      	movs	r1, #2
 8001c7a:	4836      	ldr	r0, [pc, #216]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c7c:	f000 ff8f 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2104      	movs	r1, #4
 8001c84:	4833      	ldr	r0, [pc, #204]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c86:	f000 ff8a 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, 1);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2108      	movs	r1, #8
 8001c8e:	4831      	ldr	r0, [pc, #196]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c90:	f000 ff85 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, 1);
 8001c94:	2201      	movs	r2, #1
 8001c96:	2110      	movs	r1, #16
 8001c98:	482e      	ldr	r0, [pc, #184]	; (8001d54 <set_7Segment_1+0x35c>)
 8001c9a:	f000 ff80 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, 1);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2120      	movs	r1, #32
 8001ca2:	482c      	ldr	r0, [pc, #176]	; (8001d54 <set_7Segment_1+0x35c>)
 8001ca4:	f000 ff7b 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, 1);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2140      	movs	r1, #64	; 0x40
 8001cac:	4829      	ldr	r0, [pc, #164]	; (8001d54 <set_7Segment_1+0x35c>)
 8001cae:	f000 ff76 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001cb2:	e048      	b.n	8001d46 <set_7Segment_1+0x34e>
		case 8:
			HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	4826      	ldr	r0, [pc, #152]	; (8001d54 <set_7Segment_1+0x35c>)
 8001cba:	f000 ff70 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	4824      	ldr	r0, [pc, #144]	; (8001d54 <set_7Segment_1+0x35c>)
 8001cc4:	f000 ff6b 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2104      	movs	r1, #4
 8001ccc:	4821      	ldr	r0, [pc, #132]	; (8001d54 <set_7Segment_1+0x35c>)
 8001cce:	f000 ff66 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2108      	movs	r1, #8
 8001cd6:	481f      	ldr	r0, [pc, #124]	; (8001d54 <set_7Segment_1+0x35c>)
 8001cd8:	f000 ff61 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2110      	movs	r1, #16
 8001ce0:	481c      	ldr	r0, [pc, #112]	; (8001d54 <set_7Segment_1+0x35c>)
 8001ce2:	f000 ff5c 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2120      	movs	r1, #32
 8001cea:	481a      	ldr	r0, [pc, #104]	; (8001d54 <set_7Segment_1+0x35c>)
 8001cec:	f000 ff57 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2140      	movs	r1, #64	; 0x40
 8001cf4:	4817      	ldr	r0, [pc, #92]	; (8001d54 <set_7Segment_1+0x35c>)
 8001cf6:	f000 ff52 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001cfa:	e024      	b.n	8001d46 <set_7Segment_1+0x34e>
		case 9:
			HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4814      	ldr	r0, [pc, #80]	; (8001d54 <set_7Segment_1+0x35c>)
 8001d02:	f000 ff4c 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2102      	movs	r1, #2
 8001d0a:	4812      	ldr	r0, [pc, #72]	; (8001d54 <set_7Segment_1+0x35c>)
 8001d0c:	f000 ff47 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2104      	movs	r1, #4
 8001d14:	480f      	ldr	r0, [pc, #60]	; (8001d54 <set_7Segment_1+0x35c>)
 8001d16:	f000 ff42 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2108      	movs	r1, #8
 8001d1e:	480d      	ldr	r0, [pc, #52]	; (8001d54 <set_7Segment_1+0x35c>)
 8001d20:	f000 ff3d 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, 1);
 8001d24:	2201      	movs	r2, #1
 8001d26:	2110      	movs	r1, #16
 8001d28:	480a      	ldr	r0, [pc, #40]	; (8001d54 <set_7Segment_1+0x35c>)
 8001d2a:	f000 ff38 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2120      	movs	r1, #32
 8001d32:	4808      	ldr	r0, [pc, #32]	; (8001d54 <set_7Segment_1+0x35c>)
 8001d34:	f000 ff33 	bl	8002b9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2140      	movs	r1, #64	; 0x40
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <set_7Segment_1+0x35c>)
 8001d3e:	f000 ff2e 	bl	8002b9e <HAL_GPIO_WritePin>
			break;
 8001d42:	e000      	b.n	8001d46 <set_7Segment_1+0x34e>
		default:
			break;
 8001d44:	bf00      	nop
	}
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40010800 	.word	0x40010800
 8001d54:	40010c00 	.word	0x40010c00

08001d58 <set_red>:
void set_red()
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2120      	movs	r1, #32
 8001d60:	4807      	ldr	r0, [pc, #28]	; (8001d80 <set_red+0x28>)
 8001d62:	f000 ff1c 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <set_red+0x28>)
 8001d6c:	f000 ff17 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2140      	movs	r1, #64	; 0x40
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <set_red+0x28>)
 8001d76:	f000 ff12 	bl	8002b9e <HAL_GPIO_WritePin>
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40010800 	.word	0x40010800

08001d84 <set_green>:
void set_green()
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2120      	movs	r1, #32
 8001d8c:	4807      	ldr	r0, [pc, #28]	; (8001dac <set_green+0x28>)
 8001d8e:	f000 ff06 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8001d92:	2201      	movs	r2, #1
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <set_green+0x28>)
 8001d98:	f000 ff01 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2140      	movs	r1, #64	; 0x40
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <set_green+0x28>)
 8001da2:	f000 fefc 	bl	8002b9e <HAL_GPIO_WritePin>
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40010800 	.word	0x40010800

08001db0 <set_yellow>:
void set_yellow()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2120      	movs	r1, #32
 8001db8:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <set_yellow+0x28>)
 8001dba:	f000 fef0 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <set_yellow+0x28>)
 8001dc4:	f000 feeb 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 1);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2140      	movs	r1, #64	; 0x40
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <set_yellow+0x28>)
 8001dce:	f000 fee6 	bl	8002b9e <HAL_GPIO_WritePin>
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40010800 	.word	0x40010800

08001ddc <set_red_follow>:
void set_red_follow()
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 8001de0:	2201      	movs	r2, #1
 8001de2:	2108      	movs	r1, #8
 8001de4:	4807      	ldr	r0, [pc, #28]	; (8001e04 <set_red_follow+0x28>)
 8001de6:	f000 feda 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001df0:	4804      	ldr	r0, [pc, #16]	; (8001e04 <set_red_follow+0x28>)
 8001df2:	f000 fed4 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2110      	movs	r1, #16
 8001dfa:	4802      	ldr	r0, [pc, #8]	; (8001e04 <set_red_follow+0x28>)
 8001dfc:	f000 fecf 	bl	8002b9e <HAL_GPIO_WritePin>
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40010800 	.word	0x40010800

08001e08 <set_green_follow>:
void set_green_follow()
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2108      	movs	r1, #8
 8001e10:	4807      	ldr	r0, [pc, #28]	; (8001e30 <set_green_follow+0x28>)
 8001e12:	f000 fec4 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 8001e16:	2201      	movs	r2, #1
 8001e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e1c:	4804      	ldr	r0, [pc, #16]	; (8001e30 <set_green_follow+0x28>)
 8001e1e:	f000 febe 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2110      	movs	r1, #16
 8001e26:	4802      	ldr	r0, [pc, #8]	; (8001e30 <set_green_follow+0x28>)
 8001e28:	f000 feb9 	bl	8002b9e <HAL_GPIO_WritePin>
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40010800 	.word	0x40010800

08001e34 <set_yellow_follow>:
void set_yellow_follow()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2108      	movs	r1, #8
 8001e3c:	4807      	ldr	r0, [pc, #28]	; (8001e5c <set_yellow_follow+0x28>)
 8001e3e:	f000 feae 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e48:	4804      	ldr	r0, [pc, #16]	; (8001e5c <set_yellow_follow+0x28>)
 8001e4a:	f000 fea8 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2110      	movs	r1, #16
 8001e52:	4802      	ldr	r0, [pc, #8]	; (8001e5c <set_yellow_follow+0x28>)
 8001e54:	f000 fea3 	bl	8002b9e <HAL_GPIO_WritePin>
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40010800 	.word	0x40010800

08001e60 <set_autoAjust_red>:
void set_autoAjust_red(int duration)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	yellow_duration = (float)duration/5*2;
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7fe fa29 	bl	80002c0 <__aeabi_i2f>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4913      	ldr	r1, [pc, #76]	; (8001ec0 <set_autoAjust_red+0x60>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb2c 	bl	80004d0 <__aeabi_fdiv>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe f96b 	bl	8000158 <__addsf3>
 8001e82:	4603      	mov	r3, r0
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <set_autoAjust_red+0x64>)
 8001e88:	601a      	str	r2, [r3, #0]
	green_duration = (float)duration/5*3;
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7fe fa18 	bl	80002c0 <__aeabi_i2f>
 8001e90:	4603      	mov	r3, r0
 8001e92:	490b      	ldr	r1, [pc, #44]	; (8001ec0 <set_autoAjust_red+0x60>)
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb1b 	bl	80004d0 <__aeabi_fdiv>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	490a      	ldr	r1, [pc, #40]	; (8001ec8 <set_autoAjust_red+0x68>)
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fa62 	bl	8000368 <__aeabi_fmul>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <set_autoAjust_red+0x6c>)
 8001eaa:	601a      	str	r2, [r3, #0]
	red_duration = (float)duration;
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7fe fa07 	bl	80002c0 <__aeabi_i2f>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a06      	ldr	r2, [pc, #24]	; (8001ed0 <set_autoAjust_red+0x70>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40a00000 	.word	0x40a00000
 8001ec4:	2000002c 	.word	0x2000002c
 8001ec8:	40400000 	.word	0x40400000
 8001ecc:	20000028 	.word	0x20000028
 8001ed0:	20000024 	.word	0x20000024

08001ed4 <set_autoAjust_yellow>:
void set_autoAjust_yellow(int duration)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	red_duration =  (float)duration/2*5;
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7fe f9ef 	bl	80002c0 <__aeabi_i2f>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe faf1 	bl	80004d0 <__aeabi_fdiv>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4911      	ldr	r1, [pc, #68]	; (8001f38 <set_autoAjust_yellow+0x64>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fa38 	bl	8000368 <__aeabi_fmul>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <set_autoAjust_yellow+0x68>)
 8001efe:	601a      	str	r2, [r3, #0]
	green_duration =(float)duration/2*3;
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7fe f9dd 	bl	80002c0 <__aeabi_i2f>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fadf 	bl	80004d0 <__aeabi_fdiv>
 8001f12:	4603      	mov	r3, r0
 8001f14:	490a      	ldr	r1, [pc, #40]	; (8001f40 <set_autoAjust_yellow+0x6c>)
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fa26 	bl	8000368 <__aeabi_fmul>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <set_autoAjust_yellow+0x70>)
 8001f22:	601a      	str	r2, [r3, #0]
	yellow_duration = (float)duration;
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7fe f9cb 	bl	80002c0 <__aeabi_i2f>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4a06      	ldr	r2, [pc, #24]	; (8001f48 <set_autoAjust_yellow+0x74>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40a00000 	.word	0x40a00000
 8001f3c:	20000024 	.word	0x20000024
 8001f40:	40400000 	.word	0x40400000
 8001f44:	20000028 	.word	0x20000028
 8001f48:	2000002c 	.word	0x2000002c

08001f4c <set_autoAjust_green>:
void set_autoAjust_green(int duration)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	red_duration = (float)duration/3*5;
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7fe f9b3 	bl	80002c0 <__aeabi_i2f>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4913      	ldr	r1, [pc, #76]	; (8001fac <set_autoAjust_green+0x60>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fab6 	bl	80004d0 <__aeabi_fdiv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4912      	ldr	r1, [pc, #72]	; (8001fb0 <set_autoAjust_green+0x64>)
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe f9fd 	bl	8000368 <__aeabi_fmul>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <set_autoAjust_green+0x68>)
 8001f74:	601a      	str	r2, [r3, #0]
	yellow_duration = (float)duration/3*2;
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe f9a2 	bl	80002c0 <__aeabi_i2f>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	490b      	ldr	r1, [pc, #44]	; (8001fac <set_autoAjust_green+0x60>)
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe faa5 	bl	80004d0 <__aeabi_fdiv>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe f8e4 	bl	8000158 <__addsf3>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <set_autoAjust_green+0x6c>)
 8001f96:	601a      	str	r2, [r3, #0]
	green_duration = (float)duration;
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7fe f991 	bl	80002c0 <__aeabi_i2f>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <set_autoAjust_green+0x70>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40400000 	.word	0x40400000
 8001fb0:	40a00000 	.word	0x40a00000
 8001fb4:	20000024 	.word	0x20000024
 8001fb8:	2000002c 	.word	0x2000002c
 8001fbc:	20000028 	.word	0x20000028

08001fc0 <clear>:

void clear()
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2120      	movs	r1, #32
 8001fc8:	4807      	ldr	r0, [pc, #28]	; (8001fe8 <clear+0x28>)
 8001fca:	f000 fde8 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2180      	movs	r1, #128	; 0x80
 8001fd2:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <clear+0x28>)
 8001fd4:	f000 fde3 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2140      	movs	r1, #64	; 0x40
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <clear+0x28>)
 8001fde:	f000 fdde 	bl	8002b9e <HAL_GPIO_WritePin>
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40010800 	.word	0x40010800

08001fec <clear_follow>:
void clear_follow()
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <clear_follow+0x28>)
 8001ff6:	f000 fdd2 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <clear_follow+0x28>)
 8002002:	f000 fdcc 	bl	8002b9e <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2110      	movs	r1, #16
 800200a:	4802      	ldr	r0, [pc, #8]	; (8002014 <clear_follow+0x28>)
 800200c:	f000 fdc7 	bl	8002b9e <HAL_GPIO_WritePin>
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40010800 	.word	0x40010800

08002018 <set_7segled_mode>:

void set_7segled_mode(int mode)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	2b03      	cmp	r3, #3
 8002026:	f200 80b5 	bhi.w	8002194 <set_7segled_mode+0x17c>
 800202a:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <set_7segled_mode+0x18>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	08002041 	.word	0x08002041
 8002034:	08002099 	.word	0x08002099
 8002038:	080020ed 	.word	0x080020ed
 800203c:	08002141 	.word	0x08002141
	switch(mode){
	case 1:
		if(timer5_flag==1 && led==0){
 8002040:	4b5b      	ldr	r3, [pc, #364]	; (80021b0 <set_7segled_mode+0x198>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d110      	bne.n	800206a <set_7segled_mode+0x52>
 8002048:	4b5a      	ldr	r3, [pc, #360]	; (80021b4 <set_7segled_mode+0x19c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10c      	bne.n	800206a <set_7segled_mode+0x52>
			set_7Segment_1(led, 0);
 8002050:	4b58      	ldr	r3, [pc, #352]	; (80021b4 <set_7segled_mode+0x19c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fcce 	bl	80019f8 <set_7Segment_1>
			led=1;
 800205c:	4b55      	ldr	r3, [pc, #340]	; (80021b4 <set_7segled_mode+0x19c>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]
			set_Timer5(50);
 8002062:	2032      	movs	r0, #50	; 0x32
 8002064:	f000 f940 	bl	80022e8 <set_Timer5>
			set_7Segment_1(led, 1);
			led=0;
			set_Timer5(50);
		}

		break;
 8002068:	e096      	b.n	8002198 <set_7segled_mode+0x180>
		else if(timer5_flag==1 && led==1){
 800206a:	4b51      	ldr	r3, [pc, #324]	; (80021b0 <set_7segled_mode+0x198>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	f040 8092 	bne.w	8002198 <set_7segled_mode+0x180>
 8002074:	4b4f      	ldr	r3, [pc, #316]	; (80021b4 <set_7segled_mode+0x19c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	f040 808d 	bne.w	8002198 <set_7segled_mode+0x180>
			set_7Segment_1(led, 1);
 800207e:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <set_7segled_mode+0x19c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2101      	movs	r1, #1
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fcb7 	bl	80019f8 <set_7Segment_1>
			led=0;
 800208a:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <set_7segled_mode+0x19c>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
			set_Timer5(50);
 8002090:	2032      	movs	r0, #50	; 0x32
 8002092:	f000 f929 	bl	80022e8 <set_Timer5>
		break;
 8002096:	e07f      	b.n	8002198 <set_7segled_mode+0x180>
	case 2:
		if(timer5_flag==1 && led==0){
 8002098:	4b45      	ldr	r3, [pc, #276]	; (80021b0 <set_7segled_mode+0x198>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d110      	bne.n	80020c2 <set_7segled_mode+0xaa>
 80020a0:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <set_7segled_mode+0x19c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10c      	bne.n	80020c2 <set_7segled_mode+0xaa>
			set_7Segment_1(led, 0);
 80020a8:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <set_7segled_mode+0x19c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fca2 	bl	80019f8 <set_7Segment_1>
			led=1;
 80020b4:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <set_7segled_mode+0x19c>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
			set_Timer5(50);
 80020ba:	2032      	movs	r0, #50	; 0x32
 80020bc:	f000 f914 	bl	80022e8 <set_Timer5>
		else if(timer5_flag==1 && led==1){
			set_7Segment_1(led, 2);
			led=0;
			set_Timer5(50);
		}
		break;
 80020c0:	e06c      	b.n	800219c <set_7segled_mode+0x184>
		else if(timer5_flag==1 && led==1){
 80020c2:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <set_7segled_mode+0x198>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d168      	bne.n	800219c <set_7segled_mode+0x184>
 80020ca:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <set_7segled_mode+0x19c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d164      	bne.n	800219c <set_7segled_mode+0x184>
			set_7Segment_1(led, 2);
 80020d2:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <set_7segled_mode+0x19c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2102      	movs	r1, #2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fc8d 	bl	80019f8 <set_7Segment_1>
			led=0;
 80020de:	4b35      	ldr	r3, [pc, #212]	; (80021b4 <set_7segled_mode+0x19c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
			set_Timer5(50);
 80020e4:	2032      	movs	r0, #50	; 0x32
 80020e6:	f000 f8ff 	bl	80022e8 <set_Timer5>
		break;
 80020ea:	e057      	b.n	800219c <set_7segled_mode+0x184>
	case 3:
		if(timer5_flag==1 && led==0){
 80020ec:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <set_7segled_mode+0x198>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d110      	bne.n	8002116 <set_7segled_mode+0xfe>
 80020f4:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <set_7segled_mode+0x19c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10c      	bne.n	8002116 <set_7segled_mode+0xfe>
			set_7Segment_1(led, 0);
 80020fc:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <set_7segled_mode+0x19c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fc78 	bl	80019f8 <set_7Segment_1>
			led=1;
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <set_7segled_mode+0x19c>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]
			set_Timer5(50);
 800210e:	2032      	movs	r0, #50	; 0x32
 8002110:	f000 f8ea 	bl	80022e8 <set_Timer5>
		else if(timer5_flag==1 && led==1){
			set_7Segment_1(led, 3);
			led=0;
			set_Timer5(50);
		}
		break;
 8002114:	e044      	b.n	80021a0 <set_7segled_mode+0x188>
		else if(timer5_flag==1 && led==1){
 8002116:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <set_7segled_mode+0x198>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d140      	bne.n	80021a0 <set_7segled_mode+0x188>
 800211e:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <set_7segled_mode+0x19c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d13c      	bne.n	80021a0 <set_7segled_mode+0x188>
			set_7Segment_1(led, 3);
 8002126:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <set_7segled_mode+0x19c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2103      	movs	r1, #3
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fc63 	bl	80019f8 <set_7Segment_1>
			led=0;
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <set_7segled_mode+0x19c>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
			set_Timer5(50);
 8002138:	2032      	movs	r0, #50	; 0x32
 800213a:	f000 f8d5 	bl	80022e8 <set_Timer5>
		break;
 800213e:	e02f      	b.n	80021a0 <set_7segled_mode+0x188>
	case 4:
		if(timer5_flag==1 && led==0){
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <set_7segled_mode+0x198>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d110      	bne.n	800216a <set_7segled_mode+0x152>
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <set_7segled_mode+0x19c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10c      	bne.n	800216a <set_7segled_mode+0x152>
			set_7Segment_1(led, 0);
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <set_7segled_mode+0x19c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fc4e 	bl	80019f8 <set_7Segment_1>
			led=1;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <set_7segled_mode+0x19c>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]
			set_Timer5(50);
 8002162:	2032      	movs	r0, #50	; 0x32
 8002164:	f000 f8c0 	bl	80022e8 <set_Timer5>
		else if(timer5_flag==1 && led==1){
			set_7Segment_1(led, 4);
			led=0;
			set_Timer5(50);
		}
		break;
 8002168:	e01c      	b.n	80021a4 <set_7segled_mode+0x18c>
		else if(timer5_flag==1 && led==1){
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <set_7segled_mode+0x198>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d118      	bne.n	80021a4 <set_7segled_mode+0x18c>
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <set_7segled_mode+0x19c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d114      	bne.n	80021a4 <set_7segled_mode+0x18c>
			set_7Segment_1(led, 4);
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <set_7segled_mode+0x19c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2104      	movs	r1, #4
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fc39 	bl	80019f8 <set_7Segment_1>
			led=0;
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <set_7segled_mode+0x19c>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
			set_Timer5(50);
 800218c:	2032      	movs	r0, #50	; 0x32
 800218e:	f000 f8ab 	bl	80022e8 <set_Timer5>
		break;
 8002192:	e007      	b.n	80021a4 <set_7segled_mode+0x18c>
	default:
		break;
 8002194:	bf00      	nop
 8002196:	e006      	b.n	80021a6 <set_7segled_mode+0x18e>
		break;
 8002198:	bf00      	nop
 800219a:	e004      	b.n	80021a6 <set_7segled_mode+0x18e>
		break;
 800219c:	bf00      	nop
 800219e:	e002      	b.n	80021a6 <set_7segled_mode+0x18e>
		break;
 80021a0:	bf00      	nop
 80021a2:	e000      	b.n	80021a6 <set_7segled_mode+0x18e>
		break;
 80021a4:	bf00      	nop
	}
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000030 	.word	0x20000030
 80021b4:	20000070 	.word	0x20000070

080021b8 <set_7segled_duration>:
void set_7segled_duration(int duration){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	if(timer6_flag==1 && led1==0){
 80021c0:	4b1e      	ldr	r3, [pc, #120]	; (800223c <set_7segled_duration+0x84>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d116      	bne.n	80021f6 <set_7segled_duration+0x3e>
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <set_7segled_duration+0x88>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d112      	bne.n	80021f6 <set_7segled_duration+0x3e>
		set_7Segment_2(led1, duration/10);
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <set_7segled_duration+0x88>)
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <set_7segled_duration+0x8c>)
 80021d8:	fb82 1203 	smull	r1, r2, r2, r3
 80021dc:	1092      	asrs	r2, r2, #2
 80021de:	17db      	asrs	r3, r3, #31
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7ff fa10 	bl	8001608 <set_7Segment_2>
		led1 = 1;
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <set_7segled_duration+0x88>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
		set_Timer6(50);
 80021ee:	2032      	movs	r0, #50	; 0x32
 80021f0:	f000 f88e 	bl	8002310 <set_Timer6>
	else if(timer6_flag==1 && led1==1){
		set_7Segment_2(led1, duration%10);
		led1 = 0;
		set_Timer6(50);
	}
}
 80021f4:	e01d      	b.n	8002232 <set_7segled_duration+0x7a>
	else if(timer6_flag==1 && led1==1){
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <set_7segled_duration+0x84>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d119      	bne.n	8002232 <set_7segled_duration+0x7a>
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <set_7segled_duration+0x88>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d115      	bne.n	8002232 <set_7segled_duration+0x7a>
		set_7Segment_2(led1, duration%10);
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <set_7segled_duration+0x88>)
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <set_7segled_duration+0x8c>)
 800220e:	fb83 1302 	smull	r1, r3, r3, r2
 8002212:	1099      	asrs	r1, r3, #2
 8002214:	17d3      	asrs	r3, r2, #31
 8002216:	1ac9      	subs	r1, r1, r3
 8002218:	460b      	mov	r3, r1
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	1ad1      	subs	r1, r2, r3
 8002222:	f7ff f9f1 	bl	8001608 <set_7Segment_2>
		led1 = 0;
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <set_7segled_duration+0x88>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
		set_Timer6(50);
 800222c:	2032      	movs	r0, #50	; 0x32
 800222e:	f000 f86f 	bl	8002310 <set_Timer6>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000034 	.word	0x20000034
 8002240:	20000074 	.word	0x20000074
 8002244:	66666667 	.word	0x66666667

08002248 <set_Timer1>:
int timer5_counter =0;
int timer6_flag = 1;
int timer6_counter =0;

void set_Timer1(int duration)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	timer1_counter =duration;
 8002250:	4a05      	ldr	r2, [pc, #20]	; (8002268 <set_Timer1+0x20>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
	timer1_flag =0;
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <set_Timer1+0x24>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000094 	.word	0x20000094
 800226c:	20000090 	.word	0x20000090

08002270 <set_Timer2>:
void set_Timer2(int duration)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	timer2_counter =duration;
 8002278:	4a05      	ldr	r2, [pc, #20]	; (8002290 <set_Timer2+0x20>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
	timer2_flag =0;
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <set_Timer2+0x24>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	2000009c 	.word	0x2000009c
 8002294:	20000098 	.word	0x20000098

08002298 <set_Timer3>:
void set_Timer3(int duration)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	timer3_counter =duration;
 80022a0:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <set_Timer3+0x20>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
	timer3_flag =0;
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <set_Timer3+0x24>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	200000a4 	.word	0x200000a4
 80022bc:	200000a0 	.word	0x200000a0

080022c0 <set_Timer4>:
void set_Timer4(int duration)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	timer4_counter =duration;
 80022c8:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <set_Timer4+0x20>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
	timer4_flag =0;
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <set_Timer4+0x24>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200000ac 	.word	0x200000ac
 80022e4:	200000a8 	.word	0x200000a8

080022e8 <set_Timer5>:
void set_Timer5(int duration)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	timer5_counter =duration;
 80022f0:	4a05      	ldr	r2, [pc, #20]	; (8002308 <set_Timer5+0x20>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6013      	str	r3, [r2, #0]
	timer5_flag =0;
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <set_Timer5+0x24>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	200000b0 	.word	0x200000b0
 800230c:	20000030 	.word	0x20000030

08002310 <set_Timer6>:
void set_Timer6(int duration)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	timer6_counter =duration;
 8002318:	4a05      	ldr	r2, [pc, #20]	; (8002330 <set_Timer6+0x20>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
	timer6_flag =0;
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <set_Timer6+0x24>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	200000b4 	.word	0x200000b4
 8002334:	20000034 	.word	0x20000034

08002338 <timerRun>:
void timerRun()
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <timerRun+0xcc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	dd0b      	ble.n	800235c <timerRun+0x24>
	{
		timer1_counter--;
 8002344:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <timerRun+0xcc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	4a2e      	ldr	r2, [pc, #184]	; (8002404 <timerRun+0xcc>)
 800234c:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0)
 800234e:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <timerRun+0xcc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	dc02      	bgt.n	800235c <timerRun+0x24>
		{
			timer1_flag =1;
 8002356:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <timerRun+0xd0>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]

		}
	}
	if(timer2_counter > 0)
 800235c:	4b2b      	ldr	r3, [pc, #172]	; (800240c <timerRun+0xd4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	dd0b      	ble.n	800237c <timerRun+0x44>
	{
		timer2_counter--;
 8002364:	4b29      	ldr	r3, [pc, #164]	; (800240c <timerRun+0xd4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3b01      	subs	r3, #1
 800236a:	4a28      	ldr	r2, [pc, #160]	; (800240c <timerRun+0xd4>)
 800236c:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0)
 800236e:	4b27      	ldr	r3, [pc, #156]	; (800240c <timerRun+0xd4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	dc02      	bgt.n	800237c <timerRun+0x44>
		{
			timer2_flag =1;
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <timerRun+0xd8>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]

		}
	}
	if(timer3_counter > 0)
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <timerRun+0xdc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	dd0b      	ble.n	800239c <timerRun+0x64>
	{
		timer3_counter--;
 8002384:	4b23      	ldr	r3, [pc, #140]	; (8002414 <timerRun+0xdc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	4a22      	ldr	r2, [pc, #136]	; (8002414 <timerRun+0xdc>)
 800238c:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0)
 800238e:	4b21      	ldr	r3, [pc, #132]	; (8002414 <timerRun+0xdc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	dc02      	bgt.n	800239c <timerRun+0x64>
		{
			timer3_flag =1;
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <timerRun+0xe0>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]

		}
	}
	if(timer4_counter > 0)
 800239c:	4b1f      	ldr	r3, [pc, #124]	; (800241c <timerRun+0xe4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	dd0b      	ble.n	80023bc <timerRun+0x84>
	{
		timer4_counter--;
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <timerRun+0xe4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	4a1c      	ldr	r2, [pc, #112]	; (800241c <timerRun+0xe4>)
 80023ac:	6013      	str	r3, [r2, #0]
		if(timer4_counter<=0)
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <timerRun+0xe4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	dc02      	bgt.n	80023bc <timerRun+0x84>
		{
			timer4_flag =1;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <timerRun+0xe8>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

		}
	}
	if(timer5_counter > 0)
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <timerRun+0xec>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	dd0b      	ble.n	80023dc <timerRun+0xa4>
	{
		timer5_counter--;
 80023c4:	4b17      	ldr	r3, [pc, #92]	; (8002424 <timerRun+0xec>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	4a16      	ldr	r2, [pc, #88]	; (8002424 <timerRun+0xec>)
 80023cc:	6013      	str	r3, [r2, #0]
		if(timer5_counter<=0)
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <timerRun+0xec>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	dc02      	bgt.n	80023dc <timerRun+0xa4>
		{
			timer5_flag =1;
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <timerRun+0xf0>)
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]

		}
	}
	if(timer6_counter > 0)
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <timerRun+0xf4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	dd0b      	ble.n	80023fc <timerRun+0xc4>
	{
		timer6_counter--;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <timerRun+0xf4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <timerRun+0xf4>)
 80023ec:	6013      	str	r3, [r2, #0]
		if(timer6_counter<=0)
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <timerRun+0xf4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	dc02      	bgt.n	80023fc <timerRun+0xc4>
		{
			timer6_flag =1;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <timerRun+0xf8>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

		}
	}
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	20000094 	.word	0x20000094
 8002408:	20000090 	.word	0x20000090
 800240c:	2000009c 	.word	0x2000009c
 8002410:	20000098 	.word	0x20000098
 8002414:	200000a4 	.word	0x200000a4
 8002418:	200000a0 	.word	0x200000a0
 800241c:	200000ac 	.word	0x200000ac
 8002420:	200000a8 	.word	0x200000a8
 8002424:	200000b0 	.word	0x200000b0
 8002428:	20000030 	.word	0x20000030
 800242c:	200000b4 	.word	0x200000b4
 8002430:	20000034 	.word	0x20000034

08002434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_MspInit+0x5c>)
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_MspInit+0x5c>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6193      	str	r3, [r2, #24]
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_MspInit+0x5c>)
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_MspInit+0x5c>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <HAL_MspInit+0x5c>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	61d3      	str	r3, [r2, #28]
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_MspInit+0x5c>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_MspInit+0x60>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <HAL_MspInit+0x60>)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	40021000 	.word	0x40021000
 8002494:	40010000 	.word	0x40010000

08002498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a8:	d113      	bne.n	80024d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <HAL_TIM_Base_MspInit+0x44>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <HAL_TIM_Base_MspInit+0x44>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	61d3      	str	r3, [r2, #28]
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_TIM_Base_MspInit+0x44>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	201c      	movs	r0, #28
 80024c8:	f000 f9a1 	bl	800280e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024cc:	201c      	movs	r0, #28
 80024ce:	f000 f9ba 	bl	8002846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <NMI_Handler+0x4>

080024e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <HardFault_Handler+0x4>

080024ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <MemManage_Handler+0x4>

080024f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <BusFault_Handler+0x4>

080024f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <UsageFault_Handler+0x4>

080024fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002526:	f000 f87f 	bl	8002628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <TIM2_IRQHandler+0x10>)
 8002536:	f000 ffc3 	bl	80034c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200000b8 	.word	0x200000b8

08002544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002550:	f7ff fff8 	bl	8002544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002554:	480b      	ldr	r0, [pc, #44]	; (8002584 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002556:	490c      	ldr	r1, [pc, #48]	; (8002588 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002558:	4a0c      	ldr	r2, [pc, #48]	; (800258c <LoopFillZerobss+0x16>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800255c:	e002      	b.n	8002564 <LoopCopyDataInit>

0800255e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002562:	3304      	adds	r3, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002568:	d3f9      	bcc.n	800255e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256a:	4a09      	ldr	r2, [pc, #36]	; (8002590 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800256c:	4c09      	ldr	r4, [pc, #36]	; (8002594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002570:	e001      	b.n	8002576 <LoopFillZerobss>

08002572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002574:	3204      	adds	r2, #4

08002576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800257a:	f001 faed 	bl	8003b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800257e:	f7fe ff0b 	bl	8001398 <main>
  bx lr
 8002582:	4770      	bx	lr
  ldr r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002588:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 800258c:	08003bf4 	.word	0x08003bf4
  ldr r2, =_sbss
 8002590:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8002594:	20000104 	.word	0x20000104

08002598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002598:	e7fe      	b.n	8002598 <ADC1_2_IRQHandler>
	...

0800259c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_Init+0x28>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_Init+0x28>)
 80025a6:	f043 0310 	orr.w	r3, r3, #16
 80025aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 f923 	bl	80027f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b2:	200f      	movs	r0, #15
 80025b4:	f000 f808 	bl	80025c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b8:	f7ff ff3c 	bl	8002434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40022000 	.word	0x40022000

080025c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_InitTick+0x54>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_InitTick+0x58>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025de:	fbb3 f3f1 	udiv	r3, r3, r1
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f93b 	bl	8002862 <HAL_SYSTICK_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00e      	b.n	8002614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b0f      	cmp	r3, #15
 80025fa:	d80a      	bhi.n	8002612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025fc:	2200      	movs	r2, #0
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f000 f903 	bl	800280e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002608:	4a06      	ldr	r2, [pc, #24]	; (8002624 <HAL_InitTick+0x5c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000038 	.word	0x20000038
 8002620:	20000040 	.word	0x20000040
 8002624:	2000003c 	.word	0x2000003c

08002628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_IncTick+0x1c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_IncTick+0x20>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4413      	add	r3, r2
 8002638:	4a03      	ldr	r2, [pc, #12]	; (8002648 <HAL_IncTick+0x20>)
 800263a:	6013      	str	r3, [r2, #0]
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	20000040 	.word	0x20000040
 8002648:	20000100 	.word	0x20000100

0800264c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return uwTick;
 8002650:	4b02      	ldr	r3, [pc, #8]	; (800265c <HAL_GetTick+0x10>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	20000100 	.word	0x20000100

08002660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800267c:	4013      	ands	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800268c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002692:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	60d3      	str	r3, [r2, #12]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0307 	and.w	r3, r3, #7
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db0b      	blt.n	80026ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4906      	ldr	r1, [pc, #24]	; (80026f8 <__NVIC_EnableIRQ+0x34>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2001      	movs	r0, #1
 80026e6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	e000e100 	.word	0xe000e100

080026fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	db0a      	blt.n	8002726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	490c      	ldr	r1, [pc, #48]	; (8002748 <__NVIC_SetPriority+0x4c>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	440b      	add	r3, r1
 8002720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002724:	e00a      	b.n	800273c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4908      	ldr	r1, [pc, #32]	; (800274c <__NVIC_SetPriority+0x50>)
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3b04      	subs	r3, #4
 8002734:	0112      	lsls	r2, r2, #4
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	440b      	add	r3, r1
 800273a:	761a      	strb	r2, [r3, #24]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	e000e100 	.word	0xe000e100
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f1c3 0307 	rsb	r3, r3, #7
 800276a:	2b04      	cmp	r3, #4
 800276c:	bf28      	it	cs
 800276e:	2304      	movcs	r3, #4
 8002770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3304      	adds	r3, #4
 8002776:	2b06      	cmp	r3, #6
 8002778:	d902      	bls.n	8002780 <NVIC_EncodePriority+0x30>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3b03      	subs	r3, #3
 800277e:	e000      	b.n	8002782 <NVIC_EncodePriority+0x32>
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	f04f 32ff 	mov.w	r2, #4294967295
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43d9      	mvns	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	4313      	orrs	r3, r2
         );
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3724      	adds	r7, #36	; 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c4:	d301      	bcc.n	80027ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027c6:	2301      	movs	r3, #1
 80027c8:	e00f      	b.n	80027ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ca:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <SysTick_Config+0x40>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d2:	210f      	movs	r1, #15
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295
 80027d8:	f7ff ff90 	bl	80026fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <SysTick_Config+0x40>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <SysTick_Config+0x40>)
 80027e4:	2207      	movs	r2, #7
 80027e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	e000e010 	.word	0xe000e010

080027f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ff2d 	bl	8002660 <__NVIC_SetPriorityGrouping>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002820:	f7ff ff42 	bl	80026a8 <__NVIC_GetPriorityGrouping>
 8002824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	6978      	ldr	r0, [r7, #20]
 800282c:	f7ff ff90 	bl	8002750 <NVIC_EncodePriority>
 8002830:	4602      	mov	r2, r0
 8002832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff5f 	bl	80026fc <__NVIC_SetPriority>
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff35 	bl	80026c4 <__NVIC_EnableIRQ>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ffa2 	bl	80027b4 <SysTick_Config>
 8002870:	4603      	mov	r3, r0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800287c:	b480      	push	{r7}
 800287e:	b08b      	sub	sp, #44	; 0x2c
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288e:	e148      	b.n	8002b22 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002890:	2201      	movs	r2, #1
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f040 8137 	bne.w	8002b1c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4aa3      	ldr	r2, [pc, #652]	; (8002b40 <HAL_GPIO_Init+0x2c4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d05e      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028b8:	4aa1      	ldr	r2, [pc, #644]	; (8002b40 <HAL_GPIO_Init+0x2c4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d875      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028be:	4aa1      	ldr	r2, [pc, #644]	; (8002b44 <HAL_GPIO_Init+0x2c8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d058      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028c4:	4a9f      	ldr	r2, [pc, #636]	; (8002b44 <HAL_GPIO_Init+0x2c8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d86f      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028ca:	4a9f      	ldr	r2, [pc, #636]	; (8002b48 <HAL_GPIO_Init+0x2cc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d052      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028d0:	4a9d      	ldr	r2, [pc, #628]	; (8002b48 <HAL_GPIO_Init+0x2cc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d869      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028d6:	4a9d      	ldr	r2, [pc, #628]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d04c      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028dc:	4a9b      	ldr	r2, [pc, #620]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d863      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028e2:	4a9b      	ldr	r2, [pc, #620]	; (8002b50 <HAL_GPIO_Init+0x2d4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d046      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028e8:	4a99      	ldr	r2, [pc, #612]	; (8002b50 <HAL_GPIO_Init+0x2d4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d85d      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028ee:	2b12      	cmp	r3, #18
 80028f0:	d82a      	bhi.n	8002948 <HAL_GPIO_Init+0xcc>
 80028f2:	2b12      	cmp	r3, #18
 80028f4:	d859      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028f6:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <HAL_GPIO_Init+0x80>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	08002977 	.word	0x08002977
 8002900:	08002951 	.word	0x08002951
 8002904:	08002963 	.word	0x08002963
 8002908:	080029a5 	.word	0x080029a5
 800290c:	080029ab 	.word	0x080029ab
 8002910:	080029ab 	.word	0x080029ab
 8002914:	080029ab 	.word	0x080029ab
 8002918:	080029ab 	.word	0x080029ab
 800291c:	080029ab 	.word	0x080029ab
 8002920:	080029ab 	.word	0x080029ab
 8002924:	080029ab 	.word	0x080029ab
 8002928:	080029ab 	.word	0x080029ab
 800292c:	080029ab 	.word	0x080029ab
 8002930:	080029ab 	.word	0x080029ab
 8002934:	080029ab 	.word	0x080029ab
 8002938:	080029ab 	.word	0x080029ab
 800293c:	080029ab 	.word	0x080029ab
 8002940:	08002959 	.word	0x08002959
 8002944:	0800296d 	.word	0x0800296d
 8002948:	4a82      	ldr	r2, [pc, #520]	; (8002b54 <HAL_GPIO_Init+0x2d8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800294e:	e02c      	b.n	80029aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	623b      	str	r3, [r7, #32]
          break;
 8002956:	e029      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	3304      	adds	r3, #4
 800295e:	623b      	str	r3, [r7, #32]
          break;
 8002960:	e024      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	3308      	adds	r3, #8
 8002968:	623b      	str	r3, [r7, #32]
          break;
 800296a:	e01f      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	330c      	adds	r3, #12
 8002972:	623b      	str	r3, [r7, #32]
          break;
 8002974:	e01a      	b.n	80029ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800297e:	2304      	movs	r3, #4
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e013      	b.n	80029ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800298c:	2308      	movs	r3, #8
 800298e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	611a      	str	r2, [r3, #16]
          break;
 8002996:	e009      	b.n	80029ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002998:	2308      	movs	r3, #8
 800299a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	615a      	str	r2, [r3, #20]
          break;
 80029a2:	e003      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029a4:	2300      	movs	r3, #0
 80029a6:	623b      	str	r3, [r7, #32]
          break;
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_Init+0x130>
          break;
 80029aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2bff      	cmp	r3, #255	; 0xff
 80029b0:	d801      	bhi.n	80029b6 <HAL_GPIO_Init+0x13a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	e001      	b.n	80029ba <HAL_GPIO_Init+0x13e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2bff      	cmp	r3, #255	; 0xff
 80029c0:	d802      	bhi.n	80029c8 <HAL_GPIO_Init+0x14c>
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	e002      	b.n	80029ce <HAL_GPIO_Init+0x152>
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	3b08      	subs	r3, #8
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	210f      	movs	r1, #15
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	6a39      	ldr	r1, [r7, #32]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	431a      	orrs	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8090 	beq.w	8002b1c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029fc:	4b56      	ldr	r3, [pc, #344]	; (8002b58 <HAL_GPIO_Init+0x2dc>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	4a55      	ldr	r2, [pc, #340]	; (8002b58 <HAL_GPIO_Init+0x2dc>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6193      	str	r3, [r2, #24]
 8002a08:	4b53      	ldr	r3, [pc, #332]	; (8002b58 <HAL_GPIO_Init+0x2dc>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a14:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <HAL_GPIO_Init+0x2e0>)
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a49      	ldr	r2, [pc, #292]	; (8002b60 <HAL_GPIO_Init+0x2e4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00d      	beq.n	8002a5c <HAL_GPIO_Init+0x1e0>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a48      	ldr	r2, [pc, #288]	; (8002b64 <HAL_GPIO_Init+0x2e8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d007      	beq.n	8002a58 <HAL_GPIO_Init+0x1dc>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a47      	ldr	r2, [pc, #284]	; (8002b68 <HAL_GPIO_Init+0x2ec>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d101      	bne.n	8002a54 <HAL_GPIO_Init+0x1d8>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e004      	b.n	8002a5e <HAL_GPIO_Init+0x1e2>
 8002a54:	2303      	movs	r3, #3
 8002a56:	e002      	b.n	8002a5e <HAL_GPIO_Init+0x1e2>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_GPIO_Init+0x1e2>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a60:	f002 0203 	and.w	r2, r2, #3
 8002a64:	0092      	lsls	r2, r2, #2
 8002a66:	4093      	lsls	r3, r2
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a6e:	493b      	ldr	r1, [pc, #236]	; (8002b5c <HAL_GPIO_Init+0x2e0>)
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	3302      	adds	r3, #2
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d006      	beq.n	8002a96 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a88:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	4937      	ldr	r1, [pc, #220]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	608b      	str	r3, [r1, #8]
 8002a94:	e006      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a96:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	4933      	ldr	r1, [pc, #204]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ab0:	4b2e      	ldr	r3, [pc, #184]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	492d      	ldr	r1, [pc, #180]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60cb      	str	r3, [r1, #12]
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002abe:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	4929      	ldr	r1, [pc, #164]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d006      	beq.n	8002ae6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ad8:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4923      	ldr	r1, [pc, #140]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
 8002ae4:	e006      	b.n	8002af4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ae6:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	491f      	ldr	r1, [pc, #124]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d006      	beq.n	8002b0e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b00:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4919      	ldr	r1, [pc, #100]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]
 8002b0c:	e006      	b.n	8002b1c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b0e:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	4915      	ldr	r1, [pc, #84]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	3301      	adds	r3, #1
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f47f aeaf 	bne.w	8002890 <HAL_GPIO_Init+0x14>
  }
}
 8002b32:	bf00      	nop
 8002b34:	bf00      	nop
 8002b36:	372c      	adds	r7, #44	; 0x2c
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	10320000 	.word	0x10320000
 8002b44:	10310000 	.word	0x10310000
 8002b48:	10220000 	.word	0x10220000
 8002b4c:	10210000 	.word	0x10210000
 8002b50:	10120000 	.word	0x10120000
 8002b54:	10110000 	.word	0x10110000
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	40010800 	.word	0x40010800
 8002b64:	40010c00 	.word	0x40010c00
 8002b68:	40011000 	.word	0x40011000
 8002b6c:	40010400 	.word	0x40010400

08002b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	e001      	b.n	8002b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	807b      	strh	r3, [r7, #2]
 8002baa:	4613      	mov	r3, r2
 8002bac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bae:	787b      	ldrb	r3, [r7, #1]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bb4:	887a      	ldrh	r2, [r7, #2]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bba:	e003      	b.n	8002bc4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	041a      	lsls	r2, r3, #16
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	611a      	str	r2, [r3, #16]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
	...

08002bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e26c      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8087 	beq.w	8002cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf0:	4b92      	ldr	r3, [pc, #584]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d00c      	beq.n	8002c16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bfc:	4b8f      	ldr	r3, [pc, #572]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d112      	bne.n	8002c2e <HAL_RCC_OscConfig+0x5e>
 8002c08:	4b8c      	ldr	r3, [pc, #560]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d10b      	bne.n	8002c2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c16:	4b89      	ldr	r3, [pc, #548]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d06c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x12c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d168      	bne.n	8002cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e246      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x76>
 8002c38:	4b80      	ldr	r3, [pc, #512]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a7f      	ldr	r2, [pc, #508]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e02e      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd4>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x98>
 8002c4e:	4b7b      	ldr	r3, [pc, #492]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a7a      	ldr	r2, [pc, #488]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b78      	ldr	r3, [pc, #480]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a77      	ldr	r2, [pc, #476]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e01d      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd4>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0xbc>
 8002c72:	4b72      	ldr	r3, [pc, #456]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a71      	ldr	r2, [pc, #452]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	4b6f      	ldr	r3, [pc, #444]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a6e      	ldr	r2, [pc, #440]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd4>
 8002c8c:	4b6b      	ldr	r3, [pc, #428]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a6a      	ldr	r2, [pc, #424]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	4b68      	ldr	r3, [pc, #416]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a67      	ldr	r2, [pc, #412]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d013      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7ff fcce 	bl	800264c <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7ff fcca 	bl	800264c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e1fa      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	4b5d      	ldr	r3, [pc, #372]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xe4>
 8002cd2:	e014      	b.n	8002cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7ff fcba 	bl	800264c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7ff fcb6 	bl	800264c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	; 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e1e6      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	4b53      	ldr	r3, [pc, #332]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x10c>
 8002cfa:	e000      	b.n	8002cfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d063      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d0a:	4b4c      	ldr	r3, [pc, #304]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d16:	4b49      	ldr	r3, [pc, #292]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d11c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x18c>
 8002d22:	4b46      	ldr	r3, [pc, #280]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d116      	bne.n	8002d5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	4b43      	ldr	r3, [pc, #268]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x176>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e1ba      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d46:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4939      	ldr	r1, [pc, #228]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	e03a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d020      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d64:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCC_OscConfig+0x270>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7ff fc6f 	bl	800264c <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d72:	f7ff fc6b 	bl	800264c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e19b      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d90:	4b2a      	ldr	r3, [pc, #168]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4927      	ldr	r1, [pc, #156]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]
 8002da4:	e015      	b.n	8002dd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da6:	4b26      	ldr	r3, [pc, #152]	; (8002e40 <HAL_RCC_OscConfig+0x270>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7ff fc4e 	bl	800264c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db4:	f7ff fc4a 	bl	800264c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e17a      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d03a      	beq.n	8002e54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d019      	beq.n	8002e1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de6:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7ff fc2e 	bl	800264c <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df4:	f7ff fc2a 	bl	800264c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e15a      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <HAL_RCC_OscConfig+0x26c>)
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e12:	2001      	movs	r0, #1
 8002e14:	f000 fa9a 	bl	800334c <RCC_Delay>
 8002e18:	e01c      	b.n	8002e54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e20:	f7ff fc14 	bl	800264c <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e26:	e00f      	b.n	8002e48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e28:	f7ff fc10 	bl	800264c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d908      	bls.n	8002e48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e140      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	42420000 	.word	0x42420000
 8002e44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	4b9e      	ldr	r3, [pc, #632]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e9      	bne.n	8002e28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80a6 	beq.w	8002fae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e66:	4b97      	ldr	r3, [pc, #604]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10d      	bne.n	8002e8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	4b94      	ldr	r3, [pc, #592]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4a93      	ldr	r2, [pc, #588]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	61d3      	str	r3, [r2, #28]
 8002e7e:	4b91      	ldr	r3, [pc, #580]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	4b8e      	ldr	r3, [pc, #568]	; (80030c8 <HAL_RCC_OscConfig+0x4f8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d118      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9a:	4b8b      	ldr	r3, [pc, #556]	; (80030c8 <HAL_RCC_OscConfig+0x4f8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a8a      	ldr	r2, [pc, #552]	; (80030c8 <HAL_RCC_OscConfig+0x4f8>)
 8002ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea6:	f7ff fbd1 	bl	800264c <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eae:	f7ff fbcd 	bl	800264c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b64      	cmp	r3, #100	; 0x64
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e0fd      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	4b81      	ldr	r3, [pc, #516]	; (80030c8 <HAL_RCC_OscConfig+0x4f8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x312>
 8002ed4:	4b7b      	ldr	r3, [pc, #492]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a7a      	ldr	r2, [pc, #488]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6213      	str	r3, [r2, #32]
 8002ee0:	e02d      	b.n	8002f3e <HAL_RCC_OscConfig+0x36e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x334>
 8002eea:	4b76      	ldr	r3, [pc, #472]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a75      	ldr	r2, [pc, #468]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	6213      	str	r3, [r2, #32]
 8002ef6:	4b73      	ldr	r3, [pc, #460]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4a72      	ldr	r2, [pc, #456]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	6213      	str	r3, [r2, #32]
 8002f02:	e01c      	b.n	8002f3e <HAL_RCC_OscConfig+0x36e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d10c      	bne.n	8002f26 <HAL_RCC_OscConfig+0x356>
 8002f0c:	4b6d      	ldr	r3, [pc, #436]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4a6c      	ldr	r2, [pc, #432]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f12:	f043 0304 	orr.w	r3, r3, #4
 8002f16:	6213      	str	r3, [r2, #32]
 8002f18:	4b6a      	ldr	r3, [pc, #424]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4a69      	ldr	r2, [pc, #420]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6213      	str	r3, [r2, #32]
 8002f24:	e00b      	b.n	8002f3e <HAL_RCC_OscConfig+0x36e>
 8002f26:	4b67      	ldr	r3, [pc, #412]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4a66      	ldr	r2, [pc, #408]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6213      	str	r3, [r2, #32]
 8002f32:	4b64      	ldr	r3, [pc, #400]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a63      	ldr	r2, [pc, #396]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d015      	beq.n	8002f72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f46:	f7ff fb81 	bl	800264c <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7ff fb7d 	bl	800264c <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0ab      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	4b57      	ldr	r3, [pc, #348]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ee      	beq.n	8002f4e <HAL_RCC_OscConfig+0x37e>
 8002f70:	e014      	b.n	8002f9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f72:	f7ff fb6b 	bl	800264c <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7ff fb67 	bl	800264c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e095      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f90:	4b4c      	ldr	r3, [pc, #304]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1ee      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa2:	4b48      	ldr	r3, [pc, #288]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	4a47      	ldr	r2, [pc, #284]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 8081 	beq.w	80030ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb8:	4b42      	ldr	r3, [pc, #264]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d061      	beq.n	8003088 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d146      	bne.n	800305a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <HAL_RCC_OscConfig+0x4fc>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd2:	f7ff fb3b 	bl	800264c <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fda:	f7ff fb37 	bl	800264c <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e067      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fec:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f0      	bne.n	8002fda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003000:	d108      	bne.n	8003014 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003002:	4b30      	ldr	r3, [pc, #192]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	492d      	ldr	r1, [pc, #180]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003014:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a19      	ldr	r1, [r3, #32]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	430b      	orrs	r3, r1
 8003026:	4927      	ldr	r1, [pc, #156]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <HAL_RCC_OscConfig+0x4fc>)
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003032:	f7ff fb0b 	bl	800264c <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303a:	f7ff fb07 	bl	800264c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e037      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x46a>
 8003058:	e02f      	b.n	80030ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <HAL_RCC_OscConfig+0x4fc>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7ff faf4 	bl	800264c <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7ff faf0 	bl	800264c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e020      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x498>
 8003086:	e018      	b.n	80030ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e013      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_OscConfig+0x4f4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40007000 	.word	0x40007000
 80030cc:	42420060 	.word	0x42420060

080030d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0d0      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b6a      	ldr	r3, [pc, #424]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d910      	bls.n	8003114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b67      	ldr	r3, [pc, #412]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 0207 	bic.w	r2, r3, #7
 80030fa:	4965      	ldr	r1, [pc, #404]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b63      	ldr	r3, [pc, #396]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0b8      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a58      	ldr	r2, [pc, #352]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003136:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a52      	ldr	r2, [pc, #328]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800314e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003150:	4b50      	ldr	r3, [pc, #320]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	494d      	ldr	r1, [pc, #308]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	4313      	orrs	r3, r2
 8003160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d040      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b47      	ldr	r3, [pc, #284]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d115      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e07f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318e:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e073      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	4b3d      	ldr	r3, [pc, #244]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e06b      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4936      	ldr	r1, [pc, #216]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c0:	f7ff fa44 	bl	800264c <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	e00a      	b.n	80031de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c8:	f7ff fa40 	bl	800264c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e053      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 020c 	and.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1eb      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f0:	4b27      	ldr	r3, [pc, #156]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d210      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 0207 	bic.w	r2, r3, #7
 8003206:	4922      	ldr	r1, [pc, #136]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e032      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4916      	ldr	r1, [pc, #88]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	4313      	orrs	r3, r2
 800323c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	490e      	ldr	r1, [pc, #56]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800325e:	f000 f821 	bl	80032a4 <HAL_RCC_GetSysClockFreq>
 8003262:	4602      	mov	r2, r0
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	490a      	ldr	r1, [pc, #40]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	5ccb      	ldrb	r3, [r1, r3]
 8003272:	fa22 f303 	lsr.w	r3, r2, r3
 8003276:	4a09      	ldr	r2, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1cc>)
 8003278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1d0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff f9a2 	bl	80025c8 <HAL_InitTick>

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40022000 	.word	0x40022000
 8003294:	40021000 	.word	0x40021000
 8003298:	08003bc8 	.word	0x08003bc8
 800329c:	20000038 	.word	0x20000038
 80032a0:	2000003c 	.word	0x2000003c

080032a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032be:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <HAL_RCC_GetSysClockFreq+0x94>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d002      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x30>
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d003      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x36>
 80032d2:	e027      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032d4:	4b19      	ldr	r3, [pc, #100]	; (800333c <HAL_RCC_GetSysClockFreq+0x98>)
 80032d6:	613b      	str	r3, [r7, #16]
      break;
 80032d8:	e027      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	0c9b      	lsrs	r3, r3, #18
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	4a17      	ldr	r2, [pc, #92]	; (8003340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032e4:	5cd3      	ldrb	r3, [r2, r3]
 80032e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d010      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <HAL_RCC_GetSysClockFreq+0x94>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	0c5b      	lsrs	r3, r3, #17
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	4a11      	ldr	r2, [pc, #68]	; (8003344 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a0d      	ldr	r2, [pc, #52]	; (800333c <HAL_RCC_GetSysClockFreq+0x98>)
 8003306:	fb02 f203 	mul.w	r2, r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e004      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003318:	fb02 f303 	mul.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	613b      	str	r3, [r7, #16]
      break;
 8003322:	e002      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCC_GetSysClockFreq+0x98>)
 8003326:	613b      	str	r3, [r7, #16]
      break;
 8003328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800332a:	693b      	ldr	r3, [r7, #16]
}
 800332c:	4618      	mov	r0, r3
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	007a1200 	.word	0x007a1200
 8003340:	08003bd8 	.word	0x08003bd8
 8003344:	08003be8 	.word	0x08003be8
 8003348:	003d0900 	.word	0x003d0900

0800334c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <RCC_Delay+0x34>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <RCC_Delay+0x38>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	0a5b      	lsrs	r3, r3, #9
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003368:	bf00      	nop
  }
  while (Delay --);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1e5a      	subs	r2, r3, #1
 800336e:	60fa      	str	r2, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f9      	bne.n	8003368 <RCC_Delay+0x1c>
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	20000038 	.word	0x20000038
 8003384:	10624dd3 	.word	0x10624dd3

08003388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e041      	b.n	800341e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff f872 	bl	8002498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f000 fa6e 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d001      	beq.n	8003440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e035      	b.n	80034ac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <HAL_TIM_Base_Start_IT+0x90>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_TIM_Base_Start_IT+0x4e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346a:	d004      	beq.n	8003476 <HAL_TIM_Base_Start_IT+0x4e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a12      	ldr	r2, [pc, #72]	; (80034bc <HAL_TIM_Base_Start_IT+0x94>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d111      	bne.n	800349a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b06      	cmp	r3, #6
 8003486:	d010      	beq.n	80034aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003498:	e007      	b.n	80034aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0201 	orr.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40012c00 	.word	0x40012c00
 80034bc:	40000400 	.word	0x40000400

080034c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d122      	bne.n	800351c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d11b      	bne.n	800351c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0202 	mvn.w	r2, #2
 80034ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f9b4 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f9a7 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f9b6 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b04      	cmp	r3, #4
 8003528:	d122      	bne.n	8003570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b04      	cmp	r3, #4
 8003536:	d11b      	bne.n	8003570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0204 	mvn.w	r2, #4
 8003540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f98a 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f97d 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f98c 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b08      	cmp	r3, #8
 800357c:	d122      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b08      	cmp	r3, #8
 800358a:	d11b      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0208 	mvn.w	r2, #8
 8003594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2204      	movs	r2, #4
 800359a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f960 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f953 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f962 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d122      	bne.n	8003618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d11b      	bne.n	8003618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0210 	mvn.w	r2, #16
 80035e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2208      	movs	r2, #8
 80035ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f936 	bl	8003870 <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f929 	bl	800385e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f938 	bl	8003882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b01      	cmp	r3, #1
 8003624:	d10e      	bne.n	8003644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b01      	cmp	r3, #1
 8003632:	d107      	bne.n	8003644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0201 	mvn.w	r2, #1
 800363c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd ffce 	bl	80015e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364e:	2b80      	cmp	r3, #128	; 0x80
 8003650:	d10e      	bne.n	8003670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b80      	cmp	r3, #128	; 0x80
 800365e:	d107      	bne.n	8003670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fa6b 	bl	8003b46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b40      	cmp	r3, #64	; 0x40
 800367c:	d10e      	bne.n	800369c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003688:	2b40      	cmp	r3, #64	; 0x40
 800368a:	d107      	bne.n	800369c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f8fc 	bl	8003894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d10e      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d107      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0220 	mvn.w	r2, #32
 80036c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fa36 	bl	8003b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_TIM_ConfigClockSource+0x1c>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e0b4      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x186>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800370a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003724:	d03e      	beq.n	80037a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372a:	f200 8087 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003732:	f000 8086 	beq.w	8003842 <HAL_TIM_ConfigClockSource+0x172>
 8003736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373a:	d87f      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800373c:	2b70      	cmp	r3, #112	; 0x70
 800373e:	d01a      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0xa6>
 8003740:	2b70      	cmp	r3, #112	; 0x70
 8003742:	d87b      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 8003744:	2b60      	cmp	r3, #96	; 0x60
 8003746:	d050      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x11a>
 8003748:	2b60      	cmp	r3, #96	; 0x60
 800374a:	d877      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800374c:	2b50      	cmp	r3, #80	; 0x50
 800374e:	d03c      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0xfa>
 8003750:	2b50      	cmp	r3, #80	; 0x50
 8003752:	d873      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	d058      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x13a>
 8003758:	2b40      	cmp	r3, #64	; 0x40
 800375a:	d86f      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b30      	cmp	r3, #48	; 0x30
 800375e:	d064      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003760:	2b30      	cmp	r3, #48	; 0x30
 8003762:	d86b      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b20      	cmp	r3, #32
 8003766:	d060      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003768:	2b20      	cmp	r3, #32
 800376a:	d867      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05c      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003770:	2b10      	cmp	r3, #16
 8003772:	d05a      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003774:	e062      	b.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6899      	ldr	r1, [r3, #8]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f000 f95e 	bl	8003a46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	609a      	str	r2, [r3, #8]
      break;
 80037a2:	e04f      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6899      	ldr	r1, [r3, #8]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f000 f947 	bl	8003a46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037c6:	609a      	str	r2, [r3, #8]
      break;
 80037c8:	e03c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f000 f8be 	bl	8003958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2150      	movs	r1, #80	; 0x50
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f915 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 80037e8:	e02c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f000 f8dc 	bl	80039b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2160      	movs	r1, #96	; 0x60
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f905 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 8003808:	e01c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	461a      	mov	r2, r3
 8003818:	f000 f89e 	bl	8003958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2140      	movs	r1, #64	; 0x40
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f8f5 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 8003828:	e00c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f000 f8ec 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 800383a:	e003      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      break;
 8003840:	e000      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr
	...

080038a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a25      	ldr	r2, [pc, #148]	; (8003950 <TIM_Base_SetConfig+0xa8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d007      	beq.n	80038d0 <TIM_Base_SetConfig+0x28>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c6:	d003      	beq.n	80038d0 <TIM_Base_SetConfig+0x28>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a22      	ldr	r2, [pc, #136]	; (8003954 <TIM_Base_SetConfig+0xac>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d108      	bne.n	80038e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1a      	ldr	r2, [pc, #104]	; (8003950 <TIM_Base_SetConfig+0xa8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <TIM_Base_SetConfig+0x52>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f0:	d003      	beq.n	80038fa <TIM_Base_SetConfig+0x52>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a17      	ldr	r2, [pc, #92]	; (8003954 <TIM_Base_SetConfig+0xac>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d108      	bne.n	800390c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a07      	ldr	r2, [pc, #28]	; (8003950 <TIM_Base_SetConfig+0xa8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d103      	bne.n	8003940 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	615a      	str	r2, [r3, #20]
}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	40012c00 	.word	0x40012c00
 8003954:	40000400 	.word	0x40000400

08003958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f023 0201 	bic.w	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f023 030a 	bic.w	r3, r3, #10
 8003994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	621a      	str	r2, [r3, #32]
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f023 0210 	bic.w	r2, r3, #16
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	031b      	lsls	r3, r3, #12
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	621a      	str	r2, [r3, #32]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f043 0307 	orr.w	r3, r3, #7
 8003a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	609a      	str	r2, [r3, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	021a      	lsls	r2, r3, #8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	609a      	str	r2, [r3, #8]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e041      	b.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a14      	ldr	r2, [pc, #80]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d009      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae8:	d004      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a10      	ldr	r2, [pc, #64]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d10c      	bne.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003afa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40000400 	.word	0x40000400

08003b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <__libc_init_array>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	2600      	movs	r6, #0
 8003b5c:	4d0c      	ldr	r5, [pc, #48]	; (8003b90 <__libc_init_array+0x38>)
 8003b5e:	4c0d      	ldr	r4, [pc, #52]	; (8003b94 <__libc_init_array+0x3c>)
 8003b60:	1b64      	subs	r4, r4, r5
 8003b62:	10a4      	asrs	r4, r4, #2
 8003b64:	42a6      	cmp	r6, r4
 8003b66:	d109      	bne.n	8003b7c <__libc_init_array+0x24>
 8003b68:	f000 f822 	bl	8003bb0 <_init>
 8003b6c:	2600      	movs	r6, #0
 8003b6e:	4d0a      	ldr	r5, [pc, #40]	; (8003b98 <__libc_init_array+0x40>)
 8003b70:	4c0a      	ldr	r4, [pc, #40]	; (8003b9c <__libc_init_array+0x44>)
 8003b72:	1b64      	subs	r4, r4, r5
 8003b74:	10a4      	asrs	r4, r4, #2
 8003b76:	42a6      	cmp	r6, r4
 8003b78:	d105      	bne.n	8003b86 <__libc_init_array+0x2e>
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b80:	4798      	blx	r3
 8003b82:	3601      	adds	r6, #1
 8003b84:	e7ee      	b.n	8003b64 <__libc_init_array+0xc>
 8003b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8a:	4798      	blx	r3
 8003b8c:	3601      	adds	r6, #1
 8003b8e:	e7f2      	b.n	8003b76 <__libc_init_array+0x1e>
 8003b90:	08003bec 	.word	0x08003bec
 8003b94:	08003bec 	.word	0x08003bec
 8003b98:	08003bec 	.word	0x08003bec
 8003b9c:	08003bf0 	.word	0x08003bf0

08003ba0 <memset>:
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	4402      	add	r2, r0
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d100      	bne.n	8003baa <memset+0xa>
 8003ba8:	4770      	bx	lr
 8003baa:	f803 1b01 	strb.w	r1, [r3], #1
 8003bae:	e7f9      	b.n	8003ba4 <memset+0x4>

08003bb0 <_init>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	bf00      	nop
 8003bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb6:	bc08      	pop	{r3}
 8003bb8:	469e      	mov	lr, r3
 8003bba:	4770      	bx	lr

08003bbc <_fini>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr
